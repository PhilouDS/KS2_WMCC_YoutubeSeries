// Last modification - KONTROL SYSTEM 2 - v0.5.9.2
//____________________________________________________
// CORE LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { floor, abs } from core::math
//____________________________________________________
// KSP LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { LogFile, MAIN_LOG, open_log_file } from ksp::debug
use { current_time, MAINFRAME } from ksp::game
use { CONSOLE } from ksp::console
use { Vessel, DeltaVSituation, VesselSituation } from ksp::vessel
use { Orbit } from ksp::orbit
use { Experiment, ResearchLocation } from ksp::science

//____________________________________________________
// PERSONAL LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { Spot, Stage_Info } from lib::my_structures
use { notif_green, notif_orange, notif_red, popup } from lib::misc

//____________________________________________________
// GLOBAL CONSTANTS
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use * from lib::my_constants

const logWidth: int = 91
const edge: string = "|"
fn log_updated (duration: float = 1) -> Unit = popup("Log updated", duration)

//____________________________________________________
// STARTING LOGS
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

pub fn log_mission (title: string, file: LogFile = MAIN_LOG) -> Unit = {
  file.log($"Kerbal Space Program 2 with Kontrol System v. {MAINFRAME.version}")
  underscore_line(1, file, "·")
  add_centered_entry("~ " + title + " ~", file)
  upperscore_line(1, file, "·")
  empty_log(file)
  log_updated()
}

pub fn log_general_info (craft: Vessel, apo: float, launch_ut: float, launch_az: float = 90.0, wanted_inc: float = LP_one.get_latitude(), started_lat: float = LP_one.get_latitude(), file: LogFile = MAIN_LOG, launcher: string = "unknown") -> Unit = {
  const this_stage = Stage_Info(craft, craft.staging.current)
  const twr = this_stage.get_twr(DeltaVSituation.Altitude)
  const dv = this_stage.get_total_delta_v(DeltaVSituation.Vaccum)
  
  log_section("GENERAL INFORMATION", file)
  add_left_entry($"DATE              : {time_to_date(current_time())}", file)
  empty_log(file)
  add_left_entry($"CRAFT             : {craft.name}", file)
  add_left_entry($"LAUNCHER          : {launcher}", file)
  empty_log(file)
  add_left_entry($"MASS              : {craft.mass:N3} t", file)
  add_left_entry($"Theoric TWR       : {twr:N2}", file)
  add_left_entry($"Delta-V Vaccum    : {dv:N2} m/s", file)
  add_left_entry($"STAGE number      : {craft.staging.count}", file)
  
  empty_log(file)

  log_section("LAUNCH - INITIAL DATA", file)
  add_left_entry($"WANTED APOAPSIS   : {apo:N0} m", file)
  add_left_entry($"LAUNCH LATITUDE   : {started_lat:N2}°", file)
  add_left_entry($"WANTED INCLINATION: {abs(wanted_inc):N1}°", file)
  add_left_entry($"LAUNCH AZIMUTH    : {launch_az:N2}°", file)
  add_left_entry($"LAUNCH DATE       : {time_to_date(launch_ut)}", file)
  empty_log(file)
  log_section("MISSION EVENTS", file)
  log_updated()
}

//____________________________________________________
// DURING FLIGHT
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

pub fn log_stage (craft: Vessel, file: LogFile = MAIN_LOG) -> Unit = {
  log_mission_event(craft, "STAGING", file)
  const next_stage = Stage_Info(craft, craft.staging.current)
  const twr = next_stage.get_twr(DeltaVSituation.Altitude)
  const dv = next_stage.get_total_delta_v(DeltaVSituation.Altitude)
  
  add_left_entry($"  · ACTUAL TWR          : {twr:N2}", file)
  add_left_entry($"  · ACTUAL Delta-V      : {dv:N2} m/s", file)
  add_left_entry($"  · ALTITUDE            : {craft.altitude_sealevel:N1} m", file)
  add_left_entry($"  · SURFACE VELOCITY    : {craft.surface_velocity.magnitude:N2} m/s", file)
  add_left_entry($"  · ORBITAL VELOCITY    : {craft.orbital_velocity.magnitude:N2} m/s", file)
  add_left_entry($"  · ATMOSPHERIC PRESSURE: {craft.dynamic_pressure_kpa:N3} kPa", file)
  log_updated()
}

pub fn log_hohmann (craft: Vessel, init: float, final: float, delta: float, file: LogFile = MAIN_LOG) -> Unit = {
  log_mission_event(craft, "Hohmann transfer", file)
  add_left_entry($"  · Initial velocity: {init:N2} m/s", file)
  add_left_entry($"  · Final velocity  : {final:N2} m/s", file)
  add_left_entry($"  · Delta-V         : {delta:N2} m/s", file)
  log_updated()
}

pub fn log_node (craft: Vessel, dv: float, burnTime: float, burnETA: float, newNode: bool = true, file: LogFile = MAIN_LOG) -> Unit = {
  if (newNode) {
    log_mission_event(craft, "New maneuver node", file)
  }
  else {
    log_mission_event(craft, "Maneuver node update", file)
  }
  add_left_entry($"  · Delta-V             : {dv:N1} m/s", file)
  add_left_entry($"  · Maneuver duration   : {burnTime:N2} s", file)
  add_left_entry($"  · Time before maneuver: {time_to_clock(burnETA)}", file)
  log_updated()
}

pub fn log_science (craft: Vessel, exp: Experiment, file: LogFile = MAIN_LOG) -> Unit = {
  log_mission_event(craft, "Science experiment started", file)
  add_left_entry($"  *** " + exp.experiment_id + " ***", file)
  add_left_entry($"  · Location         : {exp_loc_id_log(craft, exp)}", file)
  add_left_entry($"  · Data value       : {exp.definition.data_value:N2}", file)
  add_left_entry($"  · Sample value     : {exp.definition.sample_value:N2}", file)
  add_left_entry($"  · Potential Science: {exp.potential_science_value():N2}", file)
  add_left_entry($"  · Report size      : {exp.definition.transmission_size:N2}", file)
  add_left_entry($"  · Time to complete : {exp.time_to_complete:N2} s", file)
  log_updated()
}

pub fn log_mission_event (craft: Vessel, event: string, file: LogFile = MAIN_LOG, add_empty: bool = true) -> Unit = {
  if (add_empty) {empty_log(file)}
  const event_time = time_to_clock(craft.time_since_launch)
  add_left_entry("T+ " + event_time + ": " + event, file)
  log_updated()
}


//____________________________________________________
// ORBIT
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

pub fn log_orbit_info (obt: Orbit, title: string = "ORBIT CARACTERISTICS", file: LogFile = MAIN_LOG) -> Unit = {
  empty_log(file)
  log_section($"{title} - (Body: {obt.reference_body.name})", file)
  add_left_entry($"Apoapsis                   : {obt.apoapsis.value:N2} m", file)
  add_left_entry($"Periapsis                  : {obt.periapsis:N2} m", file)
  add_left_entry($"Argument of periapsis      : {obt.argument_of_periapsis:N1}°", file)
  add_left_entry($"Eccentricity               : {(10**4 * obt.eccentricity):N2} x 10^(-4)", file)
  add_left_entry($"Period                     : {time_to_clock(obt.period)}", file)
  add_left_entry($"Inclination                : {obt.inclination:N2}°", file)
  add_left_entry($"Longitude of Ascending Node: {obt.LAN:N2}°", file)
  upperscore_line(2, file)
  log_updated()
}


//____________________________________________________
// END MISSION
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾


pub fn log_suicid_burn (twr: float, Vm: float, Tm: float, burningAltitude: float, file: LogFile = MAIN_LOG) -> Unit = {
  empty_log(file)
  log_section("LANDING PROCEDURE", file)
  add_left_entry($"TWR              : {twr:N2}", file)
  add_left_entry($"Delta-v needed   : {Vm:N2} m/s", file)
  add_left_entry($"Ignition duration: {Tm:N2} s", file)
  add_left_entry($"Ignition altitude: {burningAltitude:N2} m", file)
  upperscore_line(2, file)
  log_updated()
}

pub fn log_landing (craft: Vessel, file: LogFile = MAIN_LOG) -> Unit = {
  empty_log(file)
  log_section("LANDING DONE", file)
  let biome = "unknown region"
  if (craft.research_location.defined) {biome = craft.research_location.value.science_region}
  log_mission_event(craft, "Vessel stable", file, false)
  add_left_entry($"LOCATION", file)
  add_left_entry($"  · {craft.main_body.name} / {craft.situation} / {biome}", file)
  add_left_entry($"  · {craft.situation.to_string()}", file)
  add_left_entry($"COORDINATES", file)
  add_left_entry($"  · latitude    : {craft.geo_coordinates.latitude:N2}°", file)
  add_left_entry($"  · longitude   : {craft.geo_coordinates.longitude:N2}°", file)
  add_left_entry($"  · altitude asl: {craft.altitude_sealevel:N1} m", file)
  empty_log(file)
  log_updated()
}

pub fn log_landing_with_target (craft: Vessel, land_point: Spot, dist: float, file: LogFile = MAIN_LOG) -> Unit = {
  empty_log(file)
  log_section("LANDING DONE", file)
  let biome = "unknown region"
  if (craft.research_location.defined) {biome = craft.research_location.value.science_region}
  log_mission_event(craft, "Vessel stable", file, false)
  add_left_entry($"LOCATION", file)
  add_left_entry($"  · {craft.main_body.name} / {craft.situation} / {biome}", file)
  add_left_entry($"  · {craft.situation.to_string()}", file)
  add_left_entry($"COORDINATES", file)
  add_left_entry($"  · latitude    : {craft.geo_coordinates.latitude:N2}°", file)
  add_left_entry($"  · longitude   : {craft.geo_coordinates.longitude:N2}°", file)
  add_left_entry($"  · altitude asl: {craft.altitude_sealevel:N1} m", file)
  empty_log(file)
  add_left_entry($"LANDING POINT", file)
  add_left_entry($"  · {land_point.name} / {land_point.body.name}", file)
  add_left_entry($"  · latitude    : {land_point.lat:N2}°", file)
  add_left_entry($"  · longitude   : {land_point.long:N2}°", file)
  add_left_entry($"  · Distance    : {dist:N1} m", file)
  log_updated()
}

pub fn log_end_mission (craft: Vessel, science_point: float = 0.0, close: bool = true, file: LogFile = MAIN_LOG) -> Unit = {
  underscore_line(1, file)
  add_centered_entry("~ END OF THE MISSION ~", file)
  upperscore_line(1, file)
  empty_log(file)
  log_section("RECAP", file)
  add_left_entry($"END UT      : {time_to_date(current_time())}", file)
  add_left_entry($"MISSION TIME: {time_to_clock(craft.time_since_launch)}", file)
  empty_log(file)
  add_left_entry($"POTENTIAL SCIENCE VALUE: {science_point:N2}", file)
  empty_log(file)
  if (close) {close_log(file)}
  log_updated()
}

pub fn close_log (file: LogFile = MAIN_LOG, empty: bool = false) -> Unit = {
  if (empty) {empty_log(file)}
  underscore_line(1, file, "·")
  log_updated()
}



//____________________________________________________
// SUB FUNCTIONS FOR LOGS
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

pub fn empty_log (file: LogFile = MAIN_LOG, border: string = edge) -> Unit = {
  let emptyLine = border
  for (i in 0..(logWidth - 2)) {
    emptyLine += " "
  }
  emptyLine += border
  file.log(emptyLine)
}

pub fn log_section (title: string, file: LogFile = MAIN_LOG) -> Unit = {
  let sec_title = "# " + title
  add_left_entry(sec_title, file)
  upperscore_line(2, file)
}

fn underscore_line (fraction: float = 1, file: LogFile = MAIN_LOG, border: string = edge) -> Unit = {
  let frac = fraction
  if (frac < 1) {frac =  1}
  let underscoreLine = border
  for (i in 0..(floor((logWidth - 2)/frac)).to_int) {
    underscoreLine += "_"    
  }
  if (frac > 1) {
    for (i in 0...(floor((logWidth - 2) * (fraction - 1)/fraction)).to_int) {
      underscoreLine += " "
    }
  }
  underscoreLine += border
  file.log(underscoreLine)
}

fn upperscore_line (fraction: float = 1, file: LogFile = MAIN_LOG, border: string = edge) -> Unit = {
  let frac = fraction
  if (frac < 1) {frac =  1}
  let upperscoreLine = border
  for (i in 0..(floor((logWidth - 2)/frac)).to_int) {
    upperscoreLine += "‾"
  }
  if (frac > 1) {
    for (i in 0...(floor((logWidth - 2) * (fraction - 1)/fraction)).to_int) {
      upperscoreLine += " "
    }
  }
  upperscoreLine += border
  file.log(upperscoreLine)
}

pub fn add_centered_entry (msg: string, file: LogFile = MAIN_LOG, border: string = edge) -> Unit = {
  let entry = msg
  if (entry.length%2 == 0) {
    entry += " "
  }
  let blankWidth = floor((logWidth - 2 - entry.length)/2).to_int
  let printentry = border
  for (i in 0..blankWidth) {
    printentry += " "
  }
  printentry += entry
  for (i in 0..blankWidth) {
    printentry += " "
  }
  printentry += border
 file.log(printentry)
}

pub fn add_left_entry (msg: string, file: LogFile = MAIN_LOG, border: string = edge) -> Unit = {
  let entry = msg
  if (entry.length%2 == 0) {
    entry += " "
  }
  let blankWidth = logWidth - 2 - entry.length
  let printentry = border + entry
  for (i in 0.. blankWidth) {
    printentry += " "
  }
  printentry += border
  file.log(printentry)
}

pub fn add_item (item: string, loc: string = "L", file: LogFile = MAIN_LOG, border: string = edge) -> Unit = {
  if (loc == "L") {
    add_left_entry("  · " + item, file)
  } else
  if (loc == "C") {
    add_centered_entry("  · " + item, file)
  }
}

//____________________________________________________
// SUB FUNCTIONS FOR NUMBERS AND DATES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

pub fn time_to_clock (time: float) -> string = {
  const nDay = floor(time / (hours_per_day * 3600)).to_int
  const nHours = floor((time - nDay*(hours_per_day*3600)) / 3600)
  let nHours_label = nHours.to_int.to_string()
  if (nHours < 10 && nHours >= 0) {nHours_label = "0" + nHours.to_int.to_string()}
  const nMin = floor((time - nDay*(hours_per_day*3600) - nHours*3600) / 60)
  let nMin_label = nMin.to_int.to_string()
  if (nMin < 10 && nMin >= 0) {nMin_label = "0" + nMin.to_int.to_string()}
  const nSec = floor(time - nDay*(hours_per_day*3600) - nHours*3600 - nMin*60)
  let nSec_label = nSec.to_string()
  if (nSec < 10 && nSec >= 0) {nSec_label = "0" + nSec.to_int.to_string()}
  const time_string = nDay.to_string() + " d " + nHours_label + " h " + nMin_label + " min " + nSec_label + " sec"

  time_string
}

pub fn time_to_date (time: float) -> string = {
  const nDay = floor(time / (hours_per_day * 3600)).to_int
  const nHours = floor((time - nDay*(hours_per_day*3600)) / 3600)
  let nHours_label = nHours.to_int.to_string()
  if (nHours < 10 && nHours >= 0) {nHours_label = "0" + nHours.to_int.to_string()}
  const nMin = floor((time - nDay*(hours_per_day*3600) - nHours*3600) / 60)
  let nMin_label = nMin.to_int.to_string()
  if (nMin < 10 && nMin >= 0) {nMin_label = "0" + nMin.to_int.to_string()}
  const nSec = floor(time - nDay*(hours_per_day*3600) - nHours*3600 - nMin*60)
  let nSec_label = nSec.to_string()
  if (nSec < 10 && nSec >= 0) {nSec_label = "0" + nSec.to_int.to_string()}
  const time_string = (nDay+1).to_string() + " d " + nHours_label + " h " + nMin_label + " min " + nSec_label + " sec"

  time_string
}

fn exp_loc_id_log (craft: Vessel, exp: Experiment, short: bool = false) -> string = {
  let exp_body_id = craft.research_location.value.body_name
  
  let exp_situation_id = exp.valid_locations.filter(
    fn(loc) -> loc.id == ("_" + craft.research_location.value.science_situation.to_string())
  )[0].id
  
  let exp_region_id = "_" + craft.research_location.value.science_region

  if (short) {
    return (exp_body_id + exp_situation_id)
  }
  else {
    return (exp_body_id + exp_situation_id + exp_region_id)
  }
}






//____________________________________________________
// OLD FUNCTIONS USED IN PREVIOUS SCRIPTS
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



pub fn log_end_mission_old (craft: Vessel, data_point: float = 0.0, sample_point: float = 0.0, close: bool = true, file: LogFile = MAIN_LOG) -> Unit = {
  underscore_line(1, file)
  add_centered_entry("~ END OF THE MISSION ~", file)
  upperscore_line(1, file)
  empty_log(file)
  log_section("RECAP", file)
  add_left_entry($"END UT      : {time_to_date(current_time())}", file)
  add_left_entry($"MISSION TIME: {time_to_clock(craft.time_since_launch)}", file)
  empty_log(file)
  add_left_entry($"DATA VALUE  : {data_point:N2}", file)
  add_left_entry($"SAMPLE VALUE: {sample_point:N2}", file)
  empty_log(file)
  if (close) {close_log(file)}
  log_updated()
}