// KONTROL SYSTEM 2 - v0.5.7.3
//____________________________________________________
// CORE LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { cos_deg, sin_deg, atan2_deg, acos_deg, asin_deg, cos, sin, acos, asin, atan2, PI, log } from core::math

//____________________________________________________
// KSP LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { Vessel, DeltaVSituation } from ksp::vessel
use { ObjectAssemblyEngineDeltaV, ObjectAssemblyStageDeltaV } from ksp::oab
use { find_body, Body, GeoCoordinates } from ksp::orbit
use { Vec2, Vec3, vec3 } from ksp::math

//____________________________________________________
// PERSONAL LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

use * from lib::my_constants

//____________________________________________________
// MAIN STRUCTURES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

//____________________________________________________
// LAUNCHPAD
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
pub struct Launchpad(launchpad_name : string) {
  name: string = launchpad_name
}

impl Launchpad {
  sync fn get_latitude(self) -> float = {
    let lat = 0.0
    if (self.name == "LP1") {
      lat = -0.547036321868925
    }
    else if (self.name == "LP2") {
      lat = -0.473134355521899
    }
    else if (self.name == "LP3") {
      lat = -0.547198826660866
    }
    else if (self.name == "LP4") {
      lat = -0.473202162499475
    }
    lat
  }

  sync fn get_longitude(self) -> float = {
    let long = 0.0
    if (self.name == "LP1") {
      long = -74.8301661674188
    }
    else if (self.name == "LP2") {
      long = -74.8927239859308
    }
    else if (self.name == "LP3") {
      long = -74.9560771300501
    }
    else if (self.name == "LP4") {
      long = -75.021156181786
    }
    long
  }

  sync fn get_altitude(self) -> float = {
    Kerbin.terrain_height(self.get_latitude(), self.get_longitude())
  }

  fn geo_coord(self) -> GeoCoordinates = {
    Kerbin.geo_coordinates(self.get_latitude(), self.get_longitude())
  }

  fn get_altitude_position(self) -> Vec3 = {
    self.geo_coord().altitude_position(self.get_altitude())
  }

  fn print_coord(self) -> string = {
    self.get_altitude_position().to_string()
  }

  fn get_rotation_velocity(self) -> float = {
    const omega = 2 * PI / Kerbin.rotation_period
    const lat = self.get_latitude()
    
    Kerbin.radius * omega * cos_deg(lat)
  }
}

//____________________________________________________
// RUNWAY
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
pub struct Runway(runway_name : string) {
  name: string = runway_name
}

impl Runway {
  fn get_latitude(self) -> float = {
    let lat = 0.0
    if (self.name == "09L") {
      lat = -0.62757487479866
    }
    if (self.name == "27R") {
      lat = -0.62737558144645
    }
    if (self.name == "09R") {
      lat = -0.636804891522271
    }
    if (self.name == "27L") {
      lat = -0.636657881517008
    }
    lat
  }

  fn get_longitude(self) -> float = {
    let long = 0.0
    if (self.name == "09L") {
      long = -75.0211055718462
    }
    if (self.name == "27R") {
      long = -74.7654563642046
    }
    if (self.name == "09R") {
      long = -75.0210938472135
    }
    if (self.name == "27L") {
      long = -74.765992544925
    }
    long
  }

  fn get_altitude(self) -> float = {    
    Kerbin.terrain_height(self.get_latitude(), self.get_longitude())
  }

  fn geo_coord(self) -> GeoCoordinates = {
    return Kerbin.geo_coordinates(self.get_latitude(), self.get_longitude())
  }

  fn get_altitude_position(self) -> Vec3 = {
    self.geo_coord().altitude_position(self.get_altitude())
  }

  fn print_coord(self) -> string = {
    self.get_altitude_position().to_string()
  }
}

//____________________________________________________
// WAYPOINT - called SPOT because Waypoint is now a structure in to2
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
pub struct Spot(spot_name: string, spot_lat : float, spot_long: float, spot_body: string) {
  name: string = spot_name
  lat: float = spot_lat
  long: float = spot_long
  body: Body = find_body(spot_body).value
}

impl Spot {
  fn get_altitude(self) -> float = {
    self.body.terrain_height(self.lat, self.long)
  }

  fn geo_coord(self) -> GeoCoordinates = {
    self.body.geo_coordinates(self.lat, self.long)
  }

  fn get_altitude_position(self) -> Vec3 = {
    self.geo_coord().altitude_position(self.get_altitude())
  }

  fn print_coord(self) -> string = {
    self.get_altitude_position().to_string()
  }

  fn distance(self, craft: Vessel) -> float = {
    const current_geo = craft.geo_coordinates
    const current_pos = current_geo.altitude_position(current_geo.terrain_height)
    const target_vector = self.get_altitude_position() - current_pos
    target_vector.magnitude
  }

  fn bearing(self, craft: Vessel) -> float = {
    const current_geo = craft.geo_coordinates
    const current_pos = current_geo.altitude_position(current_geo.terrain_height)
    const target_vector = self.get_altitude_position() - current_pos
    const bearing_vector = current_geo.surface_normal.exclude_from(target_vector.normalized)

    const forward = craft.facing.vector
    const right = craft.facing.right_vector
    atan2_deg(bearing_vector * right, bearing_vector * forward)
  }
}


//____________________________________________________
// STAGE_INFO
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾


pub struct Stage_Info(my_craft: Vessel, stage_num : int) {
  number: int = stage_num
  craft: Vessel = my_craft
}

impl Stage_Info {  
  sync fn get_init_mass (self) -> float = {
    const craft = self.craft
    let start_mass = 0.0
    const maybe_stg = craft.delta_v.stage(self.number)
    if(maybe_stg.defined) {
      const stg = maybe_stg.value
      start_mass = stg.start_mass
    }
    start_mass
  }

  sync fn get_final_mass (self) -> float = {
    const craft = self.craft
    let final_mass = 0.0
    const maybe_stg = craft.delta_v.stage(self.number)
    if(maybe_stg.defined) {
      const stg = maybe_stg.value
      final_mass = stg.end_mass
    }
    final_mass
  }

  sync fn get_thrust (self, sit: DeltaVSituation = DeltaVSituation.Vaccum) -> float = {
    const craft = self.craft
    let thrust = 0.0
    const maybe_stg = craft.delta_v.stage(self.number)
    if(maybe_stg.defined) {
      const stg = maybe_stg.value
      let stgThrust = 0.0
      const eng = stg.active_engines
      for (e in eng) {
        stgThrust += e.get_thrust(sit)
      }
      thrust = stgThrust
    }
    thrust
  }

  sync fn get_isp (self, sit: DeltaVSituation = DeltaVSituation.Vaccum) -> float = {
    const craft = self.craft
    let isp = 0.0
    const maybe_stg = craft.delta_v.stage(self.number)
    if(maybe_stg.defined) {
      const stg = maybe_stg.value
      let stgThrust = 0.0
      let sumFuelCons = 0.0
      const eng = stg.active_engines
      for (e in eng) {
        stgThrust += e.get_thrust(sit)
        sumFuelCons += e.get_thrust(sit) / e.get_ISP(sit)
      }
      if (sumFuelCons == 0.0) {
        isp = 0.0
      }
      else {
        isp = (stgThrust / sumFuelCons)
      }
    }
    isp
  }

  sync fn get_effective_velocity (self, sit: DeltaVSituation = DeltaVSituation.Vaccum) -> float = {
    self.get_isp(sit) * g0
  }

  sync fn get_fuel_flow (self, sit: DeltaVSituation = DeltaVSituation.Vaccum) -> float = {
    let fuelFlow = 0.0
    if (self.get_effective_velocity(sit) != 0.0) {
      fuelFlow = (self.get_thrust(sit) / self.get_effective_velocity(sit))
    }
    fuelFlow
  }

  sync fn get_deltav (self, sit: DeltaVSituation = DeltaVSituation.Vaccum) -> float = {
    let LN = log(self.get_init_mass() / self.get_final_mass())
    self.get_effective_velocity(sit) * LN
  }

  sync fn get_total_delta_v (self, sit: DeltaVSituation = DeltaVSituation.Vaccum) -> float = {
    let total_dv = 0.0
    for (stg in self.craft.delta_v.stages.filter(fn(s) -> s.active_engines.length > 0)) {
      let temp_stg = Stage_Info(self.craft, stg.stage)
      total_dv += temp_stg.get_deltav(sit)
    }
    total_dv
  }

  sync fn get_twr (self, sit: DeltaVSituation = DeltaVSituation.Vaccum, grav: float = g0) -> float = {
    (self.get_thrust(sit) / (self.get_init_mass() * grav))
  }

  sync fn get_burn_time (self, sit: DeltaVSituation = DeltaVSituation.Vaccum) -> float = {
    let burnTime = 0.0
    if (self.get_fuel_flow(sit) != 0) {
      burnTime = (self.get_init_mass() - self.get_final_mass()) / self.get_fuel_flow(sit)
    }
    burnTime
  }

  sync fn get_total_burn_time (self, sit: DeltaVSituation = DeltaVSituation.Vaccum) -> float = {
    let total_time = 0.0
    for (stg in self.craft.delta_v.stages.filter(fn(s) -> s.active_engines.length > 0)) {
      let temp_stg = Stage_Info(self.craft, stg.stage)
      total_time += temp_stg.get_burn_time(sit)
    }
    total_time
  }
}

pub struct Stage_Info_VAB(stg: ObjectAssemblyStageDeltaV) {
  stage: ObjectAssemblyStageDeltaV = stg
}

impl Stage_Info_VAB {
  sync fn get_stage_number (self, tot_stages_num: int) -> int = {
    tot_stages_num - self.stage.stage
  }

  sync fn get_active_engines (self) -> ObjectAssemblyEngineDeltaV[] = {
    self.stage.active_engines
  }

  sync fn get_init_mass (self) -> float = {
    self.stage.start_mass
  }

  sync fn get_final_mass (self) -> float = {
    self.stage.end_mass
  }

  sync fn get_fuel_mass (self) -> float = {
    self.stage.fuel_mass
  }

  sync fn get_dry_mass (self) -> float = {
    self.stage.dry_mass
  }

  sync fn get_atm_influence (self, body: Body, engine: ObjectAssemblyEngineDeltaV, alt: float = Kerbin.atmosphere_depth + 2000) -> float = {
    const thrustVac = engine.part.engine.value.max_thrust_output_vac
    const thrustAtm = engine.part.engine.value.max_thrust_output_atm
    thrustVac + (thrustAtm - thrustVac) * (body.atmosphere_pressure_kpa(alt) / OneAtmPressure)
  }

  sync fn get_thrust_engine (self, engine: ObjectAssemblyEngineDeltaV, alt: float = Kerbin.atmosphere_depth + 2000) -> float = {
    if (alt > Kerbin.atmosphere_depth) {
      return engine.part.engine.value.max_thrust_output_vac
    } else {
      return self.get_atm_influence(Kerbin, engine, alt)
    }
  }

  sync fn get_thrust (self, alt: float = Kerbin.atmosphere_depth + 2000) -> float = {
    let stgThrust = 0.0
    const eng = self.stage.active_engines
    for (e in eng) {
      stgThrust += self.get_thrust_engine(e, alt)
    }

    stgThrust
  }

  sync fn get_fuel_flow_eng (self, engine: ObjectAssemblyEngineDeltaV, alt: float = Kerbin.atmosphere_depth + 2000) -> float = {
    engine.engine.max_fuel_flow * engine.engine.thrust_limiter
  }

  sync fn get_effective_velocity_engine (self, engine: ObjectAssemblyEngineDeltaV, alt: float = Kerbin.atmosphere_depth + 2000) -> float = {
    if (self.get_fuel_flow_eng(engine, alt) == 0.0) {
      return 0.0
    } else {
      return self.get_thrust_engine(engine, alt) / self.get_fuel_flow_eng(engine, alt)
    }
  }

  sync fn get_isp_engine (self, engine: ObjectAssemblyEngineDeltaV, alt: float = Kerbin.atmosphere_depth + 2000) -> float = {
    self.get_effective_velocity_engine(engine, alt) / g0
  }

  //https://wiki.kerbalspaceprogram.com/wiki/Specific_impulse#Multiple_engines

  sync fn get_isp (self, alt: float = Kerbin.atmosphere_depth + 20000) -> float = {
    let stgThrust = 0.0
    let sumFuelCons = 0.0
    const eng = self.stage.active_engines
    for (e in eng) {
      stgThrust += self.get_thrust_engine(e, alt)
      sumFuelCons += self.get_thrust_engine(e, alt) / self.get_isp_engine(e, alt)
    }
    if (sumFuelCons == 0.0) {
      return 0.0
    }
    else {
      return (stgThrust / sumFuelCons)
    }
  }

  sync fn get_effective_velocity (self, alt: float = Kerbin.atmosphere_depth + 20000) -> float = {
    return self.get_isp(alt) * g0
  }

  sync fn get_fuel_flow (self, alt: float = Kerbin.atmosphere_depth + 20000) -> float = {
    let fuelFlow = 0.0
    if (self.get_effective_velocity(alt) != 0.0) {
      fuelFlow = (self.get_thrust(alt) / self.get_effective_velocity(alt))
    }
    return fuelFlow
  }

  sync fn get_dv (self, alt: float = Kerbin.atmosphere_depth + 20000) -> float = {
    let LN = log(self.get_init_mass() / self.get_final_mass())
    self.get_effective_velocity(alt) * LN
  }

  sync fn get_burn_time (self, alt: float = Kerbin.atmosphere_depth + 20000) -> float = {
    let burnTime = 0.0
    if (self.get_fuel_flow(alt) != 0) {
      burnTime = (self.get_init_mass() - self.get_final_mass()) / self.get_fuel_flow(alt)
    }
    burnTime
  }

  sync fn get_twr (self, alt: float = Kerbin.atmosphere_depth + 20000) -> float = {
    (self.get_thrust(alt) / (self.get_init_mass() * g0))
  }
}
