// Last modification - KONTROL SYSTEM 2 - v0.5.8.3
//____________________________________________________
// CORE LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { sqrt, acos_deg, abs, cos_deg, sin_deg } from core::math

//____________________________________________________
// KSP LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { yield, current_time, sleep, wait_until } from ksp::game
use { vec3, Vec3 } from ksp::math
use { cancel_warp, set_warp_index, current_warp_rate } from ksp::game::warp
use { CONSOLE } from ksp::console
use { Vessel, VesselSituation, ConnectionNodeStatus, DeltaVSituation, ParachuteDeployState, AutopilotMode } from ksp::vessel
use { Body } from ksp::orbit
use { pid_loop, PIDLoop } from ksp::control

//____________________________________________________
// STD LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { navball } from std::navball

//____________________________________________________
// PERSONAL LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use * from lib::misc
use * from lib::mission_logs
use * from lib::in_flight
use * from lib::adjusted_mnv
use * from lib::system
use { Spot, Stage_Info } from lib::my_structures

//____________________________________________________
// GLOBAL CONSTANTS
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

use * from lib::my_constants

//____________________________________________________
// MAIN FUNCTION
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

pub fn reentry_and_landing (craft: Vessel) -> Unit = {
  const chute = craft.parts.filter(fn(p) -> p.is_parachute).map(fn(c) -> c.parachute.value)[0]
  yield()
  craft.autopilot.enabled = false // SAS
  craft.autopilot.mode = AutopilotMode.Autopilot

  while (chute.deploy_state != ParachuteDeployState.ARMED) {
    trigger_staging(craft)
    yield()
  }
  CONSOLE.print_line("Parachutes activated")

  orientation(craft, -1*craft.orbital_velocity)
  yield()

  CONSOLE.print_line("In position")

  while (craft.altitude_sealevel > craft.main_body.atmosphere_depth + 2000) {
    orientation(craft, -1*craft.orbital_velocity)
    set_warp_index(3)
    yield()
  }
  cancel_warp()
  wait_until(fn() -> current_warp_rate() < 1.1)

  wait_until (fn() -> craft.altitude_sealevel < craft.main_body.atmosphere_depth)
  yield()
  notif_red("Reentry!")
  log_mission_event(craft, "Reentry")

  while (craft.altitude_sealevel > 36_000) {
    craft.autopilot.target_orientation = -1*craft.orbital_velocity
    yield()
  }

  while (craft.altitude_sealevel > 3_000) {
    craft.autopilot.target_orientation = -1*craft.surface_velocity
    set_warp_index(2)
    yield()
  }
  cancel_warp()
  wait_until(fn() -> current_warp_rate() < 1.1)
  sleep(1)

  while (abs(craft.vertical_surface_speed) > 10) {
    craft.autopilot.target_orientation = -1*craft.surface_velocity
    yield()
  }
  
  notif_green("Chutes deployed")
  log_mission_event(craft, "Chutes deployed")

  while (craft.situation != VesselSituation.Landed && craft.situation != VesselSituation.Splashed) {
    craft.autopilot.target_orientation = craft.up
    set_warp_index(2)
    yield()
  }
  cancel_warp()
  wait_until(fn() -> current_warp_rate() < 1.1)
  sleep(1)

  log_landing(craft)
}

pub fn landing (craft: Vessel, wanted_twr: float = 3, pid: PIDLoop, stop_srf_vel: float = 10, margin_alt: float = 10) -> Unit = {
  CONSOLE.clear()

  log_mission_event(craft, "Starting landing procedure")
  
  cancel_surface_velocity(craft, stop_srf_vel)
  sleep(0.1)

  suicid_burn(craft, craft.altitude_terrain, pid, wanted_twr, margin_alt)
}


pub fn align_body (craft: Vessel, inside: bool = true) -> Unit = {
  const frame = craft.main_body.parent_body.value.body_frame
  orientation(craft, craft.orbit.orbit_normal)
  let vec_craft = (craft.global_position - craft.main_body.parent_body.value.global_position).to_local(frame)
  let vec_body = (craft.main_body.global_position - craft.main_body.parent_body.value.global_position).to_local(frame)
  let vec_angle = vec_body.angle_to(vec_craft)
  CONSOLE.print_line("=== Align Body ===")

  let greater = vec_craft.magnitude > vec_body.magnitude
  if (!inside) {greater = vec_craft.magnitude < vec_body.magnitude}

  while(vec_angle > 0.3 || greater || craft.connection_status != ConnectionNodeStatus.Connected) {
    vec_craft = (craft.global_position - craft.main_body.parent_body.value.global_position).to_local(frame)
    vec_body = (craft.main_body.global_position - craft.main_body.parent_body.value.global_position).to_local(frame)
    vec_angle = vec_body.angle_to(vec_craft)
    if (inside) {
      greater = vec_craft.magnitude > vec_body.magnitude
    } else {
      greater = vec_craft.magnitude < vec_body.magnitude
    }
    CONSOLE.print_at(3, 0, $"Ship connected to KSC: {craft.connection_status == ConnectionNodeStatus.Connected}  ")
    CONSOLE.print_at(4, 0, $"                Angle: {vec_angle:N1}°")
    set_warp_index(5)
    yield()
  }
  cancel_warp()
  wait_until(fn() -> current_warp_rate() < 1.1)
  yield()
}

pub fn cancel_surface_velocity (craft: Vessel, stop_srf_vel: float) -> Unit = {
  orientation(craft, -1 * craft.surface_velocity)

  const throt = craft.set_throttle(1)
  yield()

  while (craft.surface_velocity.magnitude > stop_srf_vel) {
    check_staging(craft)
    craft.autopilot.target_orientation = -1 * craft.surface_velocity

    CONSOLE.print_at(5,0, $"  Surface velocity: {craft.surface_velocity.magnitude:N1} m/s        ")
		CONSOLE.print_at(6, 0, $"         Throttle: {throt.throttle:P1}              ") 
    
    yield()
  }
  yield()

  throt.release()
  CONSOLE.clear_line(5)
  CONSOLE.clear_line(6)
}  

pub fn cancel_surface_velocity_with_target (craft: Vessel, land_point: Spot) -> Unit = {
  const frame = craft.main_body.celestial_frame
  // target location
  const fix_lat = land_point.lat
  const fix_long = land_point.long
  const target_alt = craft.main_body.terrain_height(fix_lat, fix_long)
  const g_at_target = craft.main_body.grav_parameter / (craft.main_body.radius + target_alt)**2

  let guidance_to_target = (land_point.geo_coord().global_altitude_position(target_alt) - craft.global_position)
  let downrange_to_target = 0.0

  const start_ground_distance = ground_dist(craft, land_point)
  
  yield()

  const throt = craft.set_throttle(1)
  sleep(0.25)

  while (craft.surface_velocity.magnitude > 5) {
    check_staging(craft)

    guidance_to_target = (land_point.geo_coord().global_altitude_position(target_alt) - craft.global_position)
    downrange_to_target = guidance_to_target.magnitude
    let ground_distance = ground_dist(craft, land_point)
    
    craft.autopilot.target_orientation = -1* craft.surface_velocity

    if (craft.surface_velocity.magnitude < 20 && ground_distance > 500) {
      throt.throttle = 0
      while (ground_distance > 500) {
        ground_distance = ground_dist(craft, land_point)
        CONSOLE.print_at(5, 0, $"  Surface velocity: {craft.surface_velocity.magnitude:N1} m/s        ")
        CONSOLE.print_at(6, 0, $"Distance to target: {downrange_to_target:N1} m        ")
        CONSOLE.print_at(7, 0, $"          Throttle: {throt.throttle:P1}              ")
        CONSOLE.print_at(11, 0, $"   Ground distance: {ground_distance:N1}              ")
        yield()
      }
      throt.throttle = 1
    }

    CONSOLE.print_at(5, 0, $"  Surface velocity: {craft.surface_velocity.magnitude:N1} m/s        ")
		CONSOLE.print_at(6, 0, $"Distance to target: {downrange_to_target:N1} m        ")
		CONSOLE.print_at(7, 0, $"          Throttle: {throt.throttle:P1}              ")
    CONSOLE.print_at(11, 0, $"   Ground distance: {ground_distance:N1}              ")
    
    yield()
  }
  yield()

  throt.release()

  const stop_ground_distance = ground_dist(craft, land_point)

  CONSOLE.clear_line(5)
  CONSOLE.clear_line(6)
  CONSOLE.clear_line(7)
}

pub fn suicid_burn (craft: Vessel, terrain_alt: float, pid: PIDLoop, wanted_twr: float = 3, margin_alt: float = 10) -> Unit = {
  const target_alt = terrain_alt
  const g_at_ldg_site = craft.main_body.grav_parameter / (craft.main_body.radius + target_alt)**2

  const last_stage = Stage_Info(craft, craft.staging.current)
  let old_twr = last_stage.get_twr(DeltaVSituation.Vaccum, g_at_ldg_site)

  const lim_thrust = wanted_twr * 100 / old_twr
  sleep(0.25)
  limit_thrust(craft, lim_thrust)
  sleep(0.25)
  let new_twr = last_stage.get_twr(DeltaVSituation.Vaccum, g_at_ldg_site)
  sleep(0.25)

  const init_alt = craft.altitude_scenery
  const init_vel = craft.vertical_speed
  const apo_alt = init_alt + 0.5 * g_at_ldg_site * (init_vel/g_at_ldg_site)**2
  const ignition_alt = apo_alt / new_twr
  const vel_at_ignition = sqrt(2*(apo_alt - ignition_alt) * g_at_ldg_site)
  const free_fall_duration = (vel_at_ignition + init_vel) / g_at_ldg_site
  const suicid_burn_duration = sqrt(2 * apo_alt / (new_twr * (new_twr - 1) * g_at_ldg_site))

  sleep(0.1)
  skip_line(1)
  CONSOLE.print_line($"             TWR: {new_twr:N2}")
  CONSOLE.print_line($" burning delta V: {vel_at_ignition:N2} m/s")
  CONSOLE.print_line($"    burning time: {suicid_burn_duration:N2} s")
  CONSOLE.print_line($"burning Altitude: {ignition_alt:N1} m")

  log_mission_event(craft, "Data calculation for last burn")
  log_suicid_burn(new_twr, vel_at_ignition, suicid_burn_duration, ignition_alt)

  orientation(craft, craft.up)

  while (craft.altitude_scenery > (ignition_alt + 1000)) {
    set_warp_index(2)
    craft.autopilot.target_orientation = -1 * craft.surface_velocity
    CONSOLE.print_at(12, 0, $"     Altitude AGL: {craft.altitude_scenery:N1} m          ")
    CONSOLE.print_at(13, 0, $"Vertical Velocity: {craft.vertical_surface_speed:N2} m/s          ")
    yield()
  }
  
  cancel_warp()
  wait_until(fn() -> current_warp_rate() < 1.1)
  sleep(0.5)

  while (craft.altitude_scenery > (ignition_alt + margin_alt)) {
    craft.autopilot.target_orientation = -1 * craft.surface_velocity
    CONSOLE.print_at(12, 0, $"     Altitude AGL: {craft.altitude_scenery:N1} m          ")
    CONSOLE.print_at(13, 0, $"Vertical Velocity: {craft.vertical_surface_speed:N2} m/s          ")
    yield()
  }

  pid.setpoint = -15
  const throt = craft.set_throttle(1)

  while (craft.altitude_scenery > 100) {
    throt.throttle = pid.update(current_time(), craft.vertical_surface_speed)
    craft.autopilot.target_orientation = -1 * craft.surface_velocity
    CONSOLE.print_at(12, 0, $"     Altitude AGL: {craft.altitude_scenery:N1} m          ")
    CONSOLE.print_at(13, 0, $"Vertical Velocity: {craft.vertical_surface_speed:N2} m/s          ")
    CONSOLE.print_at(14, 0, $"         Throttle: {throt.throttle:P1}                ")
    yield()
  } 

  pid.setpoint = -1

  while (craft.situation != VesselSituation.Landed && craft.situation != VesselSituation.Splashed) {
    throt.throttle = pid.update(current_time(), craft.vertical_surface_speed)
    craft.autopilot.target_orientation = craft.up
    CONSOLE.print_at(12, 0, $"     Altitude AGL: {craft.altitude_scenery:N1} m          ")
    CONSOLE.print_at(13, 0, $"Vertical Velocity: {craft.vertical_surface_speed:N2} m/s          ")
    CONSOLE.print_at(14, 0, $"         Throttle: {throt.throttle:P1}                ")
    yield()
  } 

  throt.release()
  limit_thrust(craft, 100)
  yield()
  notif_green("Vessel has landed")
  CONSOLE.clear()
  log_landing(craft)
  yield()
}


pub fn ground_dist (craft: Vessel, land_point: Spot) -> float = {
  const craft_geo = craft.geo_coordinates
  const above_point = vec3(cos_deg(craft_geo.latitude) * cos_deg(craft_geo.longitude), cos_deg(craft_geo.latitude) * sin_deg(craft_geo.longitude), sin_deg(craft_geo.latitude))
  const target_point = vec3(cos_deg(land_point.lat) * cos_deg(land_point.long), cos_deg(land_point.lat) * sin_deg(land_point.long), sin_deg(land_point.lat))

  craft.main_body.radius * (above_point - target_point).magnitude
}