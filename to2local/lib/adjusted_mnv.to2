// KONTROL SYSTEM 2 - v0.5.6.3
//____________________________________________________
// CORE LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { sqrt, max, min, abs, exp } from core::math
use { format } from core::str

//____________________________________________________
// KSP LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { current_time, wait_until, sleep, yield } from ksp::game
use { set_warp_index, current_warp_rate } from ksp::game::warp
use { CONSOLE } from ksp::console
use { Vec3, vec3, GlobalVelocity } from ksp::math
use { Vessel, AutopilotMode, DeltaVSituation, ManeuverNode } from ksp::vessel
use { Orbit, Body } from ksp::orbit

//____________________________________________________
// PERSONAL LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { sign } from lib::misc
use { check_staging } from lib::in_flight
use {Stage_Info } from lib::my_structures

//____________________________________________________
// FUNCTIONS
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

// EXECUTE MNV

pub fn exe_mnv (craft: Vessel, dv_mnv: float, adjust_mnv: bool = true) -> Unit = {
  craft.autopilot.enabled = false // SAS
  craft.autopilot.mode = AutopilotMode.Autopilot
  let nextNode = craft.maneuver.next_node().value
  let save_dv_vector = nextNode.burn_vector
  let save_time = nextNode.time
  let burn_duration = 0.0
  let time_offset = 0.0
  
  if (adjust_mnv) {
    time_offset = best_circ_node(craft, nextNode, dv_mnv)
  }
  yield()
    
  craft.maneuver.remove_all()
  yield()
  save_time -= time_offset
  nextNode = craft.maneuver.add_burn_vector(save_time, save_dv_vector).value   
  burn_duration = compute_burn_duration(craft, dv_mnv, craft.staging.current)
  CONSOLE.print_at(7, 0, $"Burn duration: {burn_duration:N2} s")
  
  const expectedVel = nextNode.expected_orbit.orbital_velocity(nextNode.time + burn_duration).magnitude

  while (nextNode.ETA > 25) {
    set_warp_index(5)
    CONSOLE.print_at(10,0, $"Maneuver in: {nextNode.ETA:N2} s    ")
    yield()
  }

  set_warp_index(0)
  wait_until(fn() -> current_warp_rate() < 1.1)
  craft.autopilot.target_orientation = nextNode.burn_vector
  sleep(0.1)

  while (nextNode.ETA > 0) {
    CONSOLE.print_at(10,0, $"Maneuver in: {nextNode.ETA:N2} s    ")
    yield()
  }

  const craft_throttle = craft.set_throttle(0.0)
  let isDone = false
  
  CONSOLE.clear_line(10)

  const start_mnv = current_time()
  sleep(0.1)
  let dv_min = 10.0**10

  while (isDone == false) {
    craft.autopilot.target_orientation = nextNode.burn_vector
    check_staging(craft)
    let dV = abs(expectedVel - craft.orbit.orbital_velocity(current_time()).magnitude)
    let max_acc = craft.available_thrust / craft.mass
    craft_throttle.throttle = min(dV / max_acc, 1)

    if (dV > dv_min) {
      isDone = true
    }
    if (current_time() > start_mnv + burn_duration + 10) {
      isDone = true
    }
    dv_min = dV

    CONSOLE.print_at(10,0, $"remaining dV: {dV:N2} m/s  ")
    CONSOLE.print_at(11,0, $"expected vel: {expectedVel:N2} m/s  ")
    CONSOLE.print_at(12,0, $"  actual Vel: {craft.orbit.orbital_velocity(current_time()).magnitude:N2} m/s  ")
    yield()
  }
  craft_throttle.release()
  sleep(1)
  while (craft.maneuver.next_node().success) {
    craft.maneuver.next_node().value.remove()
    yield()
  }
  sleep(1)
  CONSOLE.print_at(14,0, "Maneuver Done")
  sleep(0.5)
}

pub sync fn compute_burn_duration (craft: Vessel, dv: float, stg_num: int) -> float = {
  let b_Time = 0.0
  let abs_dv = abs(dv)
  let new_dv = 0.0
  let new_stg_num = 0
  const sit = DeltaVSituation.Vaccum
  const stg = Stage_Info(craft, stg_num)
  const stgInitMass = stg.get_init_mass()
  const stgEffectiveVelocity = stg.get_effective_velocity(sit)
  const stgFuelFlow = stg.get_fuel_flow(sit)
  const stgDV = stg.get_deltav(sit)
  const stgBurnTime = stg.get_burn_time(sit)
  if (stgDV > abs_dv) {
    return (stgInitMass / stgFuelFlow) * (1 - exp(-abs_dv / stgEffectiveVelocity))
  }
  else {
    b_Time = stgBurnTime
    new_dv = abs_dv - stgDV
    new_stg_num = stg_num - 1
    return (b_Time + compute_burn_duration(craft, new_dv, new_stg_num))
  }
}


// ORBITAL VELOCITY

sync fn compute_vel(craft: Vessel, peri: float, apo: float, craftAlt: float) -> float = {  
  let rad = craft.main_body.radius
  let RV = rad + craftAlt // ship's altitude from Kerbin's center of mass
  let RP = rad + peri // ship's periapsis from Kerbin's center of mass
  let RA = rad + apo // ship's apoapsis from Kerbin's center of mass
  let mu = craft.main_body.grav_parameter
  let SMA = (RA + RP) / 2 // Semi-Major Axis

  return sqrt(mu * (2/RV - 1/SMA)) // sqrt = SQuare RooT
}


// HOHMANN TRANSFER 

pub fn h_transfer (craft: Vessel, craftAlt: float, targetAlt: float) -> float = {
  CONSOLE.clear()
  let initVel = 0.0
  let finalVel = 0.0
  let deltaVneeded = 0.0

  initVel = compute_vel(craft, craft.orbit.periapsis, craft.orbit.apoapsis.value, craftAlt)

  if (craftAlt < targetAlt) {
    finalVel = compute_vel(craft, craftAlt, targetAlt, craftAlt)
  } 
  else {
    finalVel = compute_vel(craft, targetAlt, craftAlt, craftAlt)
  }

  deltaVneeded = finalVel - initVel

  CONSOLE.print_line("--> Maneuver")
  CONSOLE.print_line("  initV = " + initVel.to_fixed(2) + " m/s.")
  CONSOLE.print_line(" finalV = " + finalVel.to_fixed(2) + " m/s.")
  CONSOLE.print_line("Delta-V = " + deltaVneeded.to_fixed(2) + " m/s.")
  CONSOLE.print_line("‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾")
  
  deltaVneeded
}

// GO TO FROM

pub fn go_to_from (craft: Vessel, goTo: float, goFrom: string = "AP") -> float = {
  let craftFrom = craft.orbit.periapsis  
  let node_UT = craft.orbit.next_periapsis_time()

  if (goFrom == "AP") {
    craftFrom = craft.orbit.apoapsis.value
    node_UT = craft.orbit.next_apoapsis_time().value
  }

  const deltaVneeded = h_transfer(craft, craftFrom, goTo)
  craft.maneuver.add(node_UT, 0, 0, deltaVneeded)

  return deltaVneeded
}

// CIRC_AT

pub fn circ_at (craft: Vessel, at: string = "AP") -> float = {
  if (at == "AP") {
    return go_to_from (craft, craft.orbit.apoapsis.value)
  } else {
    return go_to_from (craft, craft.orbit.periapsis, "PE")
  }
}

fn best_circ_node (craft: Vessel, old_node: ManeuverNode, dv: float) -> float = {
  let min_ecc = 1.0
  let min_bef = 0.0
  let bef_node = 0.0
 
  const duration_time = old_node.burn_duration
  const pos_time = old_node.time
  const save_dv = old_node.burn_vector

  CONSOLE.print_at(15,0, "Adjusting node")

  while (craft.maneuver.next_node().success) {
    craft.maneuver.next_node().value.remove()
    yield()
  }

  for (i in 0...100) {
    bef_node = duration_time * (i/100.0)
    craft.maneuver.add(pos_time - bef_node, 0, 0, dv)
    let temp_node = craft.maneuver.next_node().value
    let next = temp_node.expected_orbit
    temp_node.remove()

    if (next.eccentricity < min_ecc) {
      min_ecc = next.eccentricity
      min_bef = bef_node
    }
  }

  while (craft.maneuver.next_node().success) {
    craft.maneuver.next_node().value.remove()
    yield()
  }
  sleep(0.5)

  //craft.maneuver.add_burn_vector(pos_time, save_dv)
  CONSOLE.clear_line(15)

  return min_bef
}

pub fn limit_thrust (craft: Vessel, perc: float) -> Unit = {
  for (e in craft.engines) {
    e.thrust_limiter = perc
  }
}