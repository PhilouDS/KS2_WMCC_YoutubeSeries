// Last modification - KONTROL SYSTEM 2 - v0.5.8.0
//____________________________________________________
// CORE LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { sqrt, max, min, abs, exp, floor, log10 } from core::math
use { format } from core::str

//____________________________________________________
// KSP LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { current_time, wait_until, sleep, yield } from ksp::game
use { set_warp_index, current_warp_rate, warp_to, cancel_warp } from ksp::game::warp
use { LogFile, MAIN_LOG } from ksp::debug
use { CONSOLE } from ksp::console
use { Vec3, vec3, GlobalVelocity } from ksp::math
use { Vessel, AutopilotMode, DeltaVSituation, ManeuverNode } from ksp::vessel
use { Orbit, Body } from ksp::orbit

//____________________________________________________
// PERSONAL LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use * from lib::misc
use { info_orbit } from lib::show_info
use { check_staging } from lib::in_flight
use { Stage_Info } from lib::my_structures
use * from lib::mission_logs

//____________________________________________________
// FUNCTIONS
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

//===============================
// EXECUTE A MANEUVER NODE
//===============================
pub fn exe_mnv (craft: Vessel, dv_mnv: float, adjust_mnv: bool = true, file: LogFile = MAIN_LOG) -> Unit = {
  craft.autopilot.enabled = false // SAS
  craft.autopilot.mode = AutopilotMode.Autopilot
  let nextNode = craft.maneuver.next_node().value
  let save_dv_vector = nextNode.burn_vector
  let save_time = nextNode.time
  let burn_duration = 0.0
  let time_offset = 0.0
  
  if (adjust_mnv) {
    time_offset = best_circ_node(craft, nextNode, dv_mnv)
  }
  yield()
    
  craft.maneuver.remove_all()
  yield()
   
  let old_burn = compute_burn_duration(craft, dv_mnv, craft.staging.current)
  sleep(0.25)
  if (old_burn < 10) {
    limit_thrust(craft, old_burn * 10)
    sleep(0.25)
    burn_duration = compute_burn_duration(craft, dv_mnv, craft.staging.current)
    sleep(0.1)
    if (adjust_mnv) {
      time_offset = best_circ_node(craft, nextNode, dv_mnv)
    }
    save_time -= (burn_duration - old_burn)
  } else {
    burn_duration = old_burn
  }
  sleep(0.1)
  save_time -= time_offset
  sleep(0.1)
  CONSOLE.print_at(7, 0, $"Burn duration: {burn_duration:N2} s")
  CONSOLE.print_at(8, 0, $"Total delta-v: {save_dv_vector.magnitude:N2} m/s")
  nextNode = craft.maneuver.add_burn_vector(save_time, save_dv_vector).value 

  log_node(craft, save_dv_vector.magnitude, burn_duration, nextNode.ETA, true, file)
 
  const expectedVel = nextNode.expected_orbit.orbital_velocity(nextNode.time + burn_duration).magnitude

  while (nextNode.ETA > 25) {
    set_warp_index(floor(log10(nextNode.ETA)).to_int + 3)
    CONSOLE.print_at(10,0, $"Maneuver in: {nextNode.ETA:N2} s    ")
    yield()
  }

  set_warp_index(0)
  wait_until(fn() -> current_warp_rate() < 1.1)
  orientation(craft, nextNode.burn_vector)
  sleep(0.1)

  const frame = craft.main_body.celestial_frame
  const dv0 = nextNode.burn_vector
  const dv_min : Cell<float> = Cell(dv0.magnitude)
  const target_orbit = nextNode.expected_orbit

  while (nextNode.ETA > 0) {
    CONSOLE.print_at(10,0, $"Maneuver in: {nextNode.ETA:N2} s    ")
    yield()
  }

  const craft_throttle = craft.set_throttle(0.0)
  let isDone = false
  
  CONSOLE.clear_line(10)

  const start_mnv = current_time()
  sleep(0.1)
  orientation(craft, nextNode.burn_vector)
  log_mission_event(craft, "Engine Ignition - maneuver started", file)

  while (dv_min.value >= 0.01) {
    const ut = current_time()
    craft.autopilot.target_orientation = nextNode.burn_vector
    check_staging(craft, file)
    const dv = target_orbit.orbital_velocity(ut) - craft.orbit.orbital_velocity(ut)
    let max_acc = craft.available_thrust / craft.mass
    craft_throttle.throttle = min(dv.magnitude / max_acc, 1)

    if(dv0 * dv < 0) break
    if (current_time() > start_mnv + burn_duration + 20) break

    CONSOLE.print_at(10,0, $"remaining dV: {dv.magnitude:N2} m/s  ")
    CONSOLE.print_at(11,0, $"  actual Vel: {craft.orbit.orbital_velocity(current_time()).magnitude:N2} m/s  ")
    CONSOLE.print_at(13,0, $"    Throttle: {craft_throttle.throttle:P2}  ")
    yield()
  }
  craft_throttle.release()
  yield()
  CONSOLE.print_at(13,0, $"    Throttle: 0.00%  ")
  sleep(1)
  while (craft.maneuver.next_node().success) {
    craft.maneuver.next_node().value.remove()
    yield()
  }
  sleep(1)
  limit_thrust(craft, 100)
  CONSOLE.print_at(14,0, "Maneuver Done")
  notif_green("Maneuver done")
  log_mission_event(craft, "MECO - end of maneuver", file, false)
  log_mission_event(craft, $"Actual velocity: {craft.orbital_velocity.magnitude:N2} m/s", file, false)
  sleep(0.5)
}

//===============================
// Compute burn duration
//===============================
pub sync fn compute_burn_duration (craft: Vessel, dv: float, stg_num: int, sit: DeltaVSituation = DeltaVSituation.Vaccum) -> float = {
  let b_Time = 0.0
  let abs_dv = abs(dv)
  let new_dv = 0.0
  let new_stg_num = 0
  const stg = Stage_Info(craft, stg_num)
  const stgInitMass = stg.get_init_mass()
  const stgEffectiveVelocity = stg.get_effective_velocity(sit)
  const stgFuelFlow = stg.get_fuel_flow(sit)
  const stgDV = stg.get_deltav(sit)
  const stgBurnTime = stg.get_burn_time(sit)
  if (stgDV > abs_dv) {
    return (stgInitMass / stgFuelFlow) * (1 - exp(-abs_dv / stgEffectiveVelocity))
  }
  else {
    b_Time = stgBurnTime
    new_dv = abs_dv - stgDV
    new_stg_num = stg_num - 1
    return (b_Time + compute_burn_duration(craft, new_dv, new_stg_num))
  }
}

//===============================
// ORBITAL VELOCITY
//===============================
sync fn compute_vel(craft: Vessel, peri: float, apo: float, craftAlt: float) -> float = {  
  let rad = craft.main_body.radius
  let RV = rad + craftAlt // craft's altitude from Kerbin's center of mass
  let RP = rad + peri // craft's periapsis from Kerbin's center of mass
  let RA = rad + apo // craft's apoapsis from Kerbin's center of mass
  let mu = craft.main_body.grav_parameter
  let SMA = (RA + RP) / 2 // Semi-Major Axis

  return sqrt(mu * (2/RV - 1/SMA)) // sqrt = SQuare RooT
}

//===============================
// HOHMANN TRANSFER 
//===============================
pub fn h_transfer (craft: Vessel, craftAlt: float, targetAlt: float, file: LogFile = MAIN_LOG) -> float = {
  CONSOLE.clear()
  let initVel = 0.0
  let finalVel = 0.0
  let deltaVneeded = 0.0

  initVel = compute_vel(craft, craft.orbit.periapsis, craft.orbit.apoapsis.value, craftAlt)

  if (craftAlt < targetAlt) {
    finalVel = compute_vel(craft, craftAlt, targetAlt, craftAlt)
  } 
  else {
    finalVel = compute_vel(craft, targetAlt, craftAlt, craftAlt)
  }

  deltaVneeded = finalVel - initVel

  CONSOLE.print_line("=> HOHMANN TRANSFER")
  CONSOLE.print_line("  initV = " + initVel.to_fixed(2) + " m/s.")
  CONSOLE.print_line(" finalV = " + finalVel.to_fixed(2) + " m/s.")
  CONSOLE.print_line("Delta-V = " + deltaVneeded.to_fixed(2) + " m/s.")
  CONSOLE.print_line("‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾")

  log_hohmann(craft, initVel, finalVel, deltaVneeded, file)
  
  deltaVneeded
}

//===============================
//-> Go to ... from ...
//===============================
pub fn go_to_from (craft: Vessel, goTo: float, goFrom: string = "AP", file: LogFile = MAIN_LOG) -> float = {
  let craftFrom = craft.orbit.periapsis  
  let node_UT = craft.orbit.next_periapsis_time()

  if (goFrom == "AP") {
    craftFrom = craft.orbit.apoapsis.value
    node_UT = craft.orbit.next_apoapsis_time().value
  }

  const deltaVneeded = h_transfer(craft, craftFrom, goTo, file)
  craft.maneuver.add(node_UT, 0, 0, deltaVneeded)

  return deltaVneeded
}

pub fn capture_SOI (craft: Vessel, perc: float = 0.5, file: LogFile = MAIN_LOG) -> Unit = {
  orientation(craft, -1 * craft.orbit.orbital_velocity(current_time()))
  while (!craft.orbit.apoapsis.defined || craft.orbit.apoapsis.value > perc * craft.main_body.SOI_radius) {
    craft.autopilot.target_orientation = -1 * craft.orbit.orbital_velocity(current_time())
    craft.set_throttle(1)
    check_staging(craft, file)
    yield()
  }
  craft.set_throttle(0)
  sleep(0.1)
  log_orbit_info(craft.orbit, "CAPTURE ORBIT", file)
  save_now(craft)
}

//===============================
//-> CIRCULARIZATION FUNCTIONS
//===============================
pub fn circ_at_AP (craft: Vessel, file: LogFile = MAIN_LOG) -> Unit = {
  orientation(craft, craft.orbit.orbital_velocity(current_time()))
  sleep(.1)
  exe_mnv(craft, do_circ(craft, "AP", file), true, file)
  sleep(0.1)

  if (craft.orbit.eccentricity > 0.0001) {
    exe_mnv(craft, do_circ(craft, "PE", file), true, file)
  }
  sleep(0.5)
  CONSOLE.print_line("Circ done")
  sleep(2)

  CONSOLE.clear()
  info_orbit(craft, 2)
  log_orbit_info(craft.orbit, "ORBIT CARACTERISTICS", file)
  sleep(2)
}

pub fn circ_at_PE (craft: Vessel, file: LogFile = MAIN_LOG) -> Unit = {
  orientation(craft, -1 * craft.orbit.orbital_velocity(current_time()))
  sleep(0.1)

  exe_mnv(craft, do_circ(craft, "PE"), true, file)
  sleep(0.1)

  if (craft.orbit.eccentricity > 0.0001) {
    exe_mnv(craft, do_circ(craft, "PE"), false, file)
  }

  sleep(1)

  CONSOLE.clear()
  info_orbit(craft, 2)
  log_orbit_info(craft.orbit, "ORBIT CARACTERISTICS", file)
  sleep(2)
}

pub fn do_circ (craft: Vessel, at: string = "AP", file: LogFile = MAIN_LOG) -> float = {
  if (at == "AP") {
    return go_to_from (craft, craft.orbit.apoapsis.value, "AP", file)
  } else {
    return go_to_from (craft, craft.orbit.periapsis, "PE", file)
  }
}

fn best_circ_node (craft: Vessel, old_node: ManeuverNode, dv: float) -> float = {
  let min_ecc = 1.0
  let min_bef = 0.0
  let bef_node = 0.0
 
  const duration_time = old_node.burn_duration
  const pos_time = old_node.time
  const save_dv = old_node.burn_vector

  CONSOLE.print_at(15,0, "Adjusting node")

  while (craft.maneuver.next_node().success) {
    craft.maneuver.next_node().value.remove()
    yield()
  }

  for (i in 0...100) {
    bef_node = duration_time * (i/100.0)
    craft.maneuver.add(pos_time - bef_node, 0, 0, dv)
    let temp_node = craft.maneuver.next_node().value
    let next = temp_node.expected_orbit
    temp_node.remove()

    if (next.eccentricity < min_ecc) {
      min_ecc = next.eccentricity
      min_bef = bef_node
    }
  }

  while (craft.maneuver.next_node().success) {
    craft.maneuver.next_node().value.remove()
    yield()
  }
  sleep(0.5)

  //craft.maneuver.add_burn_vector(pos_time, save_dv)
  CONSOLE.clear_line(15)

  return min_bef
}

//===============================
//-> CHANGING INCLINATION OF ORBIT AT APOAPSIS
//===============================

pub fn change_inc_obt (craft: Vessel, wanted_inc: float, ut: float, margin_value: float = 0.1, delta_change: float = 0.1) -> ManeuverNode = {
  CONSOLE.print_line("Changing inclination")

  const inc_node = craft.maneuver.add(ut, 0, 0, 0).value
  let delta_applied = 0.1
  let value_list: float[] = []
  let old_inc = craft.orbit.inclination

  CONSOLE.print_at(1,0,$"     Target: {wanted_inc:N2}°")
  CONSOLE.print_at(2,0,$"     Margin: {margin_value:N2}°")

  while (abs(old_inc - wanted_inc) > margin_value) {
    if (abs(old_inc - wanted_inc) < 5*margin_value) {delta_applied = delta_change}
    CONSOLE.print_at(0,0,$"      Delta: {delta_applied:N2} m/s   ")
    CONSOLE.print_at(4,0,$"Inclination: {old_inc:N2}°               ")
    CONSOLE.print_at(6,0,$"   Prograde: {inc_node.prograde:N2} m/s   ")
    CONSOLE.print_at(7,0,$"     Radial: {inc_node.radial_out:N2} m/s   ")
    CONSOLE.print_at(8,0,$"     Normal: {inc_node.normal:N2} m/s   ")
    
    inc_node.radial_out += delta_applied
    value_list += abs(wanted_inc - inc_node.expected_orbit.inclination)
    inc_node.radial_out -= 2*delta_applied
    value_list += abs(wanted_inc - inc_node.expected_orbit.inclination)
    inc_node.radial_out += delta_applied
    
    inc_node.normal += delta_applied
    value_list += abs(wanted_inc - inc_node.expected_orbit.inclination)
    inc_node.normal -= 2*delta_applied
    value_list += abs(wanted_inc - inc_node.expected_orbit.inclination)
    inc_node.normal += delta_applied

    inc_node.prograde += delta_applied
    value_list += abs(wanted_inc - inc_node.expected_orbit.inclination)
    inc_node.prograde -= 2*delta_applied
    value_list += abs(wanted_inc - inc_node.expected_orbit.inclination)
    inc_node.prograde += delta_applied

    let (new_correction @min, idx) = min_of_list(value_list)

    if (idx == 0) {inc_node.radial_out += delta_applied}
    else if (idx == 1) {inc_node.radial_out -= delta_applied}
    else if (idx == 2) {inc_node.normal += delta_applied}
    else if (idx == 3) {inc_node.normal -= delta_applied}
    else if (idx == 4) {inc_node.prograde += delta_applied}
    else if (idx == 5) {inc_node.prograde -= delta_applied}

    old_inc = inc_node.expected_orbit.inclination
    value_list = []
    CONSOLE.print_at(10,0,$" total ΔV: {inc_node.burn_vector.magnitude:N2} m/s   ")
    yield()
  }

  inc_node
}

pub fn change_periapsis_here (craft: Vessel, wanted_pe: float) -> Unit = {
  if (craft.orbit.periapsis < wanted_pe) {
    orientation(craft, craft.orbital_velocity)
    while (craft.orbit.periapsis < wanted_pe) {
      craft.set_throttle(0.01)
      yield()
    }
    craft.set_throttle(0)
  }
  if (craft.orbit.periapsis > wanted_pe + 1000) {
    orientation(craft, -1*craft.orbital_velocity)
    while (craft.orbit.periapsis > wanted_pe) {
      craft.set_throttle(0.01)
      yield()
    }
    craft.set_throttle(0)
  }
}



//===============================
//-> Change thrust limiter
//===============================

pub fn limit_thrust (craft: Vessel, perc: float) -> Unit = {
  for (e in craft.engines) {
    e.thrust_limiter = perc/100
  }
  popup($"Thrust limiter is now {perc/100:P2}")
}

//===============================
//-> change orientation of the craft and wait until the angle is < margin
//===============================
pub fn orientation (craft: Vessel, vect: Vec3, margin: float = 1) -> Unit = {
  while (craft.facing.vector.angle_to(vect) > margin) {
    craft.autopilot.target_orientation = vect
    yield()
  }
  sleep(0.1)
}

