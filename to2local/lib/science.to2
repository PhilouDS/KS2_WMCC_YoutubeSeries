//____________________________________________________
// CORE LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { sqrt, max, min, abs, round, floor } from core::math
use { format } from core::str

//____________________________________________________
// KSP LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { CONSOLE } from ksp::console
use { sleep, wait_until, yield, current_time } from ksp::game
use { Vessel, ModuleScienceExperiment } from ksp::vessel
use { Experiment, ExperimentState, ResearchLocation, ScienceSituation, get_completed_research_reports } from ksp::science

//____________________________________________________
// PERSONAL LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { print_title } from lib::misc

//____________________________________________________
// FUNCTIONS
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

const difficulty_settings:float = 0.8

fn listOfScienceExp (craft: Vessel) -> Experiment[] = {
  let scienceList: Experiment[] = []

  for (PRT in craft.parts.filter(fn(prt) -> prt.science_experiment.defined)) {
    scienceList += PRT.science_experiment.value.experiments
  }
  scienceList
}

pub fn print_science (craft: Vessel) -> Unit = {
  CONSOLE.clear()
  const list_exp = craft.parts.filter(fn(prt) -> prt.science_experiment.defined)
  let expList: Experiment[] = []

  for (PRT in list_exp) {
    print_title ("[PART:] " + PRT.part_name, CONSOLE.cursor_row, false)
    expList = PRT.science_experiment.value.experiments

    for (exp in expList) {
      print_title("*** " + exp.definition.id + " ***", CONSOLE.cursor_row, false)
      CONSOLE.print_line(format("{1,-25} {0:N2}",
        (exp.time_to_complete, "--> Time to complete:")))

      CONSOLE.print_line(format("{1,-25} {0:N2}",
        (exp.definition.sample_value * difficulty_settings, "--> Sample value:")))

      CONSOLE.print_line(format("{1,-25} {0:N2}",
        (exp.definition.data_value * difficulty_settings, "--> Data value:")))

      CONSOLE.print_line(format("{1,-25} {0:N2}",
        (exp.definition.transmission_size, "--> Transmission size:")))

      CONSOLE.print_line(format("{1,-25} {0}",
        (exp.current_experiment_state, "--> Current state:")))
      
      const check_new = check_new_exp(craft, exp)

      CONSOLE.print_line(format("{1,-25} {0}",
        (check_new, "--> New experiment?")))

      CONSOLE.print_line(" ")
      CONSOLE.print_line("-------------------------------  ")
    }
  }
  expList = []
}

fn check_new_exp (craft: Vessel, exp: Experiment) -> bool = {
  return (!reported_previous_flight(craft, exp) && !reported_this_flight(craft, exp))
}

pub fn check_science (craft: Vessel) -> bool = {
  for (exp in listOfScienceExp(craft)) {
    if (check_new_exp(craft, exp) && exp.current_experiment_state != ExperimentState.RUNNING) {
      return true
    }
  }
  return false
}

fn reported_previous_flight (craft: Vessel, exp: Experiment) -> bool = {
  const science_completed = get_completed_research_reports()
  let rep_previous = false

  if (science_completed.length != 0) {
    for (rep in science_completed) {
      if ((rep.experiment_id == exp.definition.id) &&
          ((rep.research_location_id == exp_loc_id(craft, exp)) ||
          (rep.research_location_id == exp_loc_id(craft, exp, true)))) {
        rep_previous = true
      }
    }
  }

  return rep_previous
}

fn reported_this_flight (craft: Vessel, exp: Experiment) -> bool = {
  const research_inventory = craft.science_storage.value.research_reports
  let rep_this = false
  
  if (research_inventory.length != 0) {
    for (rep in research_inventory) {
      if ((rep.experiment_id == exp.definition.id) &&
          ((rep.research_location_id == exp_loc_id(craft, exp)) ||
          (rep.research_location_id == exp_loc_id(craft, exp, true)))) {
        rep_this = true
      }
    }
  }

  return rep_this
}

fn exp_loc_id (craft: Vessel, exp: Experiment, short: bool = false) -> string = {
  let exp_body_id = craft.research_location.value.body_name
  
  let exp_situation_id = exp.valid_locations.filter(
    fn(loc) -> loc.id == ("_" + craft.research_location.value.science_situation.to_string())
  )[0].id
  
  let exp_region_id = "_" + craft.research_location.value.science_region

  if (short) {
    return (exp_body_id + exp_situation_id)
  }
  else {
    return (exp_body_id + exp_situation_id + exp_region_id)
  }
}

pub fn run_science (craft: Vessel, waitExp: bool, transmit: bool = false) -> Unit = {
  const sciencePart = listOfScienceExp(craft)
  let max_time = -1.0
  let idx_slowest_exp = -1
  let exp_time = -1.0
  let time_line = -1.0 // to print sort of download bar: |||||||
  CONSOLE.clear()

  const msg = "EXPERIMENT(S) READY TO START"
  let printMsg = false

  let new_exp: Experiment[] = []

  for (i in 0..sciencePart.length) {
    if (check_new_exp(craft, sciencePart[i])) {
      printMsg = true
      new_exp += sciencePart[i]
      if (sciencePart[i].time_to_complete > max_time) {
        max_time = sciencePart[i].time_to_complete
        idx_slowest_exp = i
      }
    }
  }

  if (printMsg) {
    const msg_row = CONSOLE.cursor_row
    print_title(msg, msg_row, false)
    const science_row = CONSOLE.cursor_row+2
    for (i in 0..3) {
      CONSOLE.print_at(CONSOLE.cursor_row,0, (3-i).to_string())
      sleep(1)
    }

    CONSOLE.clear_line(CONSOLE.cursor_row)

    for (exp in new_exp) {
      exp.run_experiment()
    }

    if (waitExp) {
      const slowest_exp = sciencePart[idx_slowest_exp]   
      CONSOLE.clear_line(msg_row)
      CONSOLE.clear_line(msg_row+1)
      CONSOLE.print_line ("Please wait the end of experiment(s)...")

      while(slowest_exp.current_running_time > 0) {
        exp_time = (slowest_exp.time_to_complete-slowest_exp.current_running_time)/slowest_exp.time_to_complete
        time_line = round(floor(exp_time*100)/5)

        print_title("Collecting Science...", science_row)
        CONSOLE.print_at(science_row+3, 0, format("|| {0:P2}", exp_time))
        CONSOLE.print_at(science_row+3, time_line.to_int+11, "|")
        yield()
      }
      CONSOLE.print_at(science_row+3, 0, "|| 100 % |||")
      sleep(1)
      for (i in 0..4) CONSOLE.clear_line(science_row+i)
      CONSOLE.print_line("All experiments done.")
      if (transmit == true) {
        transmit_data(craft)
      }
    }
  }
  CONSOLE.clear()
}

pub fn transmit_data (craft: Vessel) -> Unit = {
  CONSOLE.print_line("Transmitting data...")
  craft.science_storage.value.start_transmit_all()
}



// fn check_new_exp (craft: Vessel, exp: Experiment) -> bool = {
//   const craft_research_inventory = craft.science_storage.value.research_reports
//   let diff_loc_exp = false
//   let same_exp_name = false
//   let is_new_exp = false
//   let temp = 0

//   if (craft_research_inventory.length == 0) {
//     is_new_exp = true
//   }
//   else {
//     if (already_reported(craft, exp)) {
//       is_new_exp = false
//     }
//     else {
//       is_new_exp = true
//     }
//   }

//   return is_new_exp
// }

// fn already_reported(craft: Vessel, exp: Experiment) -> bool = {
//   const craft_research_inventory = craft.science_storage.value.research_reports
//   let same_loc = false
//   let same_name = false
//   let match = 0
//   for (rep in 0..craft_research_inventory.length) {
//     if (same_location(craft_research_inventory[rep].research_location, craft.research_location.value)) {
//       same_loc = true
//     }
//     if (craft_research_inventory[rep].definition.id == exp.definition.id) {
//       same_name = true
//     }
//     if (same_loc && same_name) {match += 1}
//   }
//   return (match > 0)
// }


// fn same_location (One: ResearchLocation, Two: ResearchLocation) -> bool = {
//   const case1 = (One.body_name == Two.body_name)

//   const no_region_required = ((!One.requires_region) || (!Two.requires_region))
//   const case2 = ((One.science_region == Two.science_region) || no_region_required)
  
//   const no_specific_science_situation_one = (One.science_situation == ScienceSituation.None)
//   const no_specific_science_situation_two = (Two.science_situation == ScienceSituation.None)
//   const case3 = (One.science_situation == Two.science_situation ||
//                   no_specific_science_situation_one || no_specific_science_situation_two)
  
//   return (case1 && case2 && case3)
// }