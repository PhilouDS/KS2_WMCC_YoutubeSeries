// KONTROL SYSTEM 2 - v0.5.8.0
//____________________________________________________
// CORE LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { format } from core::str

//____________________________________________________
// KSP LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { CONSOLE } from ksp::console
use { CONSOLE_WINDOW } from ksp::ui
use { sleep, yield } from ksp::game
use { open_log_file, LogFile, MAIN_LOG, SAVE_LOAD_CONTROL } from ksp::debug
use { Vessel, DeltaVSituation, AutopilotMode, Targetable } from ksp::vessel
use { Orbit, Body } from ksp::orbit

//____________________________________________________
// PERSONAL LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use * from lib::misc
use { Stage_Info } from lib::my_structures
use * from lib::mission_logs
use * from lib::my_constants


//____________________________________________________
// FUNCTIONS
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾


//===============================
//-> check for particular parts
//===============================

pub fn check_fairing (craft: Vessel) -> bool = craft.parts.filter_map(fn(p) -> p.fairing).length > 0
pub fn check_clamps (craft: Vessel) -> bool = craft.parts.filter_map(fn(p) -> p.launch_clamp).length > 0

//===============================
//-> Starting the script with or without target
//===============================

pub fn start_with_target (craft: Vessel, title: string, targ: Body, refresh_log: bool = true) -> Body = {
  CONSOLE.clear()
  CONSOLE_WINDOW.open()
  console_size(500,600)
  notif_green("Initialisation of the script")
  sleep(1)
  craft.target = targ
  sleep(0.1)
  const ship_target = craft.target.value.body.value
  CONSOLE.print_line($"Target: {ship_target.name}")

  if (refresh_log) {
    MAIN_LOG.truncate()
    log_mission(title) 
  }  
    
  sleep(0.25)

  CONSOLE.clear()

  craft.autopilot.enabled = false // SAS
  craft.autopilot.mode = AutopilotMode.Autopilot

  ship_target
}

pub fn start (craft: Vessel, title: string, refresh_log: bool = true) -> Unit = {
  CONSOLE.clear()
  CONSOLE_WINDOW.open()
  console_size(500,600)
  notif_green("Initialisation of the script")
  sleep(1)

  if (refresh_log) {MAIN_LOG.truncate()}

  log_mission(title) 
    
  sleep(0.25)

  CONSOLE.clear()

  craft.autopilot.enabled = false // SAS
  craft.autopilot.mode = AutopilotMode.Autopilot
}

// //===============================
// //-> logs GT parameters of the craft and returns it
// //===============================

// pub fn new_craft_parameters (craft: Vessel, launcher: string, pitch_angle: float, pitch_vel: float) -> (pitchAng: float, pitchVel: float) = {
//   const crafts_file = open_log_file("crafts_parameters")
//   const crafts_list = crafts_file.read_lines()
//   let new_param = true
//   for (i in 0..crafts_list.length) {
//     if (crafts_list[i].contains(launcher)) {new_param = false}
//   }
//   let pitchAng = pitch_angle
//   let pitchVel = pitch_vel

//   if (new_param) {
//     crafts_file.log(launcher)
//     crafts_file.log(pitch_angle.to_string())
//     crafts_file.log(pitch_vel.to_string())
//     crafts_file.log(" ")
//     CONSOLE.print_line("New parameters")
//   } else {
//     CONSOLE.print_line("No new parameters")
//   }
//   (pitchAng: pitchAng, pitchVel: pitchVel)
// }

//===============================
//-> countdown
//===============================

pub fn countdown (craft: Vessel, clamps: bool = true, count: int = 3) -> Unit = {
  CONSOLE.clear()
  CONSOLE.print_at(0,0, "Liftoff in: ")
  for (i in 0..count) {
    CONSOLE.print_at(0,12,format("{0:N0} s", (count - i)))
    if (clamps && i == count - 1) {
      craft.staging.next()
      CONSOLE.print_at(1,0, "Ignition")
    }
    sleep(1)
  }
  craft.staging.next()
  CONSOLE.clear()
  print_title("LIFTOFF", 0, false)
  yield()
  const this_stage = Stage_Info(craft, craft.staging.current)
  const twr = this_stage.get_twr(DeltaVSituation.Altitude)
  const dv = this_stage.get_total_delta_v(DeltaVSituation.Altitude)
  
  log_mission_event(craft, "Liftoff")
  add_item($"Actual TWR    : {twr:N2}")
  add_item($"Actual Delta-V: {dv:N2} m/s")
  popup("Liftoff")
}


//===============================
//-> Launch with 2 given azimuth, selection of the good one
//===============================

pub fn launch_from_north (craft: Vessel, craft_target: Body, azimuth: float[]) -> float = {
  let angle_from_north = 90.0
  let msg = format("azimuth = {0:N1} °", angle_from_north)
  if (azimuth.length != 0) {
    let azimuthAN = azimuth[0]
    let azimuthDN = azimuth[1]

    const time_AN = craft.orbit.time_of_ascending_node(craft_target.orbit)
    const time_DN = craft.orbit.time_of_descending_node(craft_target.orbit)

    if (time_AN > time_DN) {
      angle_from_north = azimuthAN
      msg = format("azimuth = {0:N1} °", angle_from_north)
    } else {
      angle_from_north = azimuthDN
      msg = format("azimuth = {0:N1} °", angle_from_north)
    }
  }
  CONSOLE.print_line(msg)

  return angle_from_north
}