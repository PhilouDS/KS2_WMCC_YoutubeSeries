//____________________________________________________
// CORE LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { max } from core::math
//____________________________________________________
// KSP LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { sleep, wait_until, yield, current_time } from ksp::game
use { CONSOLE } from ksp::console
use { Vessel, ConnectionNodeStatus } from ksp::vessel

//____________________________________________________
// PERSONAL LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { info_gt, info_orbit } from lib::show_info
use { print_title } from lib::misc

//____________________________________________________
// FUNCTIONS
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

pub fn gravity_turn (craft: Vessel, target_apo: float, angle_from_north: float, pitch_angle: float, jettison_fairing: bool = false) -> Unit = {
  CONSOLE.clear()

  print_title("GRAVITY TURN IN PROGRESS", 0, false)
  const this_row = CONSOLE.cursor_row
  let no_more_fairing = false
  let in_space: bool = false
  
  let angle_update = 0.0
  let t_gt = current_time()
  while(craft.facing.vector.angle_to(craft.heading_direction(angle_from_north, pitch_angle, 0).vector) > 0.5) {
    angle_update = (90 - pitch_angle)*(current_time()-t_gt)/3.0
    craft.autopilot.target_orientation = craft.heading_direction(angle_from_north, 90-angle_update, 90 - angle_from_north).vector
    check_staging(craft)
    yield()
  }

  while(craft.facing.vector.angle_to(craft.surface_velocity) > 0.5) {
    check_staging(craft)
    yield()
  }
  
  let angle_above_horizon = 90 - craft.up.angle_to(craft.surface_velocity)
  
  while (craft.altitude_sealevel < 36000) {
    check_staging(craft)
    angle_above_horizon = 90 - craft.up.angle_to(craft.surface_velocity)
    craft.autopilot.target_orientation = craft.heading_direction(angle_from_north, angle_above_horizon, 90-angle_from_north).vector
    info_gt(craft, angle_above_horizon, this_row, false)
    info_orbit(craft, this_row + 4)  
    yield()
  }

  while (craft.orbit.apoapsis.value < target_apo) {
    check_staging(craft)
    angle_above_horizon = 90 - craft.up.angle_to(craft.orbit.prograde(current_time()))
    craft.autopilot.target_orientation = craft.heading_direction(angle_from_north, angle_above_horizon, 90-angle_from_north).vector
    info_gt(craft, angle_above_horizon, this_row)
    info_orbit(craft, this_row + 4)
    if (craft.orbit.apoapsis.value > 0.98 * target_apo) {craft.set_throttle(max(0.1, 30/craft.available_thrust))}
    if (craft.altitude_sealevel > 86000 && jettison_fairing && !no_more_fairing) {
      craft.parts.filter_map(fn(p) -> p.fairing)[0].jettison()
      no_more_fairing = true
      CONSOLE.clear()
      in_space = true
      print_title("IN SPACE", 0)
      sleep(0.5)
    }
    yield()
  }
  
  yield()
  craft.set_throttle(0)
  CONSOLE.clear()
  print_title("GRAVITY TURN DONE", 0)
  sleep(1)

  if (!in_space) {
    while(craft.altitude_sealevel < 86000) {
      angle_above_horizon = 90 - craft.up.angle_to(craft.orbit.prograde(current_time()))
      craft.autopilot.target_orientation = craft.heading_direction(angle_from_north, angle_above_horizon, 90-angle_from_north).vector
      info_gt(craft, angle_above_horizon, 2)
      info_orbit(craft, 6) 
      yield()
    }
    yield()
    CONSOLE.clear()
    print_title("IN SPACE", 0)
    if (!no_more_fairing && jettison_fairing) {craft.parts.filter_map(fn(p) -> p.fairing)[0].jettison()}
  }
}

pub fn check_staging (craft: Vessel) -> Unit = {
  let check = false
  const engine_in_stage = list_engine_stage(craft, craft.staging.current)
  if (craft.staging.current > 0) {
    if (engine_in_stage.length == 0 ||
      engine_in_stage.filter(fn(eng) -> eng.has_ignited && eng.is_flameout).length != 0) {
      check = true
    }
  }
  yield()
  if (!check && engine_in_stage.filter(fn(eng) -> !eng.has_ignited).length > 0) {
    check = true
  }
  yield()
  if (check) {
    CONSOLE.print_at(15,0,"Staging")
    yield()
    trigger_staging(craft)
  }
  yield()
  CONSOLE.clear_line(15)
}

pub fn trigger_staging (craft: Vessel) -> Unit = {
  wait_until(fn() -> craft.staging.ready || craft.connection_status == ConnectionNodeStatus.Disconnected)
  craft.staging.next()
  yield()
}


fn list_engine_stage (craft: Vessel, stage_num: int) -> ksp::vessel::ModuleEngine[] = {
  let list_engine: ksp::vessel::ModuleEngine[] = []
  for (prt in craft.staging.parts_in_stage(stage_num)) {
    if (prt.is_engine) {
      list_engine += prt.engine_module.value
    }
  }
  list_engine
}