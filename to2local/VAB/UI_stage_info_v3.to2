// KONTROL SYSTEM 2 - v0.5.6.1
//____________________________________________________
// CORE LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { log, floor, round } from core::math
use { format } from core::str

//____________________________________________________
// KSP LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { CONSOLE } from ksp::console
use { CONSOLE_WINDOW, screen_size, open_window, Align, Window, Container } from ksp::ui
use { sleep, yield, wait_until } from ksp::game
use { Vec2, vec2 } from ksp::math
use { active_object_assembly_builder, ObjectAssembly, ObjectAssemblyPart, ObjectAssemblyStageDeltaV, ObjectAssemblyEngine, ObjectAssemblyEngineDeltaV } from ksp::oab
use { DeltaVSituation } from ksp::vessel
use { Body, find_body } from ksp::orbit

//____________________________________________________
// PERSONAL LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { Launchpad, Stage_Info_VAB } from lib::my_structures

//____________________________________________________
// GLOBAL CONSTANTS
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

use * from lib::my_constants


const window_width: float = myScreen.x / 3
const window_height: float = 250.0

const LP: Launchpad = Launchpad("LP1")
const LP_alt: float = LP.get_altitude() + 10

//____________________________________________________
// MAIN FUNCTION
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

pub fn main_editor() -> Result<Unit> = {

	CONSOLE.clear()
	
	
  const stage_window = open_window("<b>STAGE INFO v3</b>",
    0.5*(myScreen.x - window_width),
    0.5*myScreen.y,
    window_width,
    window_height)

	const click_button: Cell<bool> = Cell(false)

	const button_box = stage_window.add_horizontal(10.0, Align.Center)
	const refresh_button = button_box.add_button("Refresh", Align.Center)
	
	let maybe_box = create_info_box(stage_window)?
  const main_box: Cell<Container> = Cell(maybe_box)

	while (!stage_window.is_closed) {
		refresh_button.on_click(fn() -> {
			click_button.value = true
			main_box.value.remove()
		})
		if (click_button.value) {
			maybe_box = create_info_box(stage_window)?
			main_box.value = maybe_box
			click_button.value = false
		}
		yield()
	}
}

fn create_info_box (window: Window) -> Result<Container> = {
	const builder = active_object_assembly_builder()?
	const maybe_assembly = builder.main_assembly

	let stage_number = 0
	let stage_act_eng = 0

	let twr_asl = 0.0
	let twr_15km = 0.0
	let twr_36km = 0.0
	let twr_vac = 0.0

	let dv_asl = 0.0
	let dv_15km = 0.0
	let dv_36km = 0.0
	let dv_vac = 0.0

	let b_time_str = "0"

	const main_box = window.add_horizontal(10.0, Align.Center)
	const first_column_box = main_box.add_vertical(10.0, Align.Stretch)
	const nbr_title = first_column_box.add_label("# Stage", Align.End)
	nbr_title.font_size = text_font_size
	const act_eng_title = first_column_box.add_label("# Active Engines", Align.End)
	act_eng_title.font_size = text_font_size
	const twr_asl_title = first_column_box.add_label("ASL TWR", Align.End)
	twr_asl_title.font_size = text_font_size
	const dv_asl_title = first_column_box.add_label("ASL Δv", Align.End)
	dv_asl_title.font_size = text_font_size
	const twr_15km_title = first_column_box.add_label("15 km TWR", Align.End)
	twr_15km_title.font_size = text_font_size
	const dv_15km_title = first_column_box.add_label("15 km Δv", Align.End)
	dv_15km_title.font_size = text_font_size
	const twr_36km_title = first_column_box.add_label("36 km TWR", Align.End)
	twr_36km_title.font_size = text_font_size
	const dv_36km_title = first_column_box.add_label("36 km Δv", Align.End)
	dv_36km_title.font_size = text_font_size
	const twr_vac_title = first_column_box.add_label("Vac TWR", Align.End)
	twr_vac_title.font_size = text_font_size
	const dv_vac_title = first_column_box.add_label("Vac Δv", Align.End)
	dv_vac_title.font_size = text_font_size
	const burn_time_title = first_column_box.add_label("Burn time", Align.End)
	burn_time_title.font_size = text_font_size

	if (Some(assembly) = maybe_assembly) {
		for (stg in assembly.delta_v.stages.filter(fn(s) -> s.active_engines.length > 0)) {
			const this_stage = Stage_Info_VAB(stg)

			stage_number = this_stage.get_stage_number(assembly.delta_v.stages.length)
			stage_act_eng = this_stage.get_active_engines().length
			twr_asl = this_stage.get_twr(LP_alt)
			twr_15km = this_stage.get_twr(15000)
			twr_36km = this_stage.get_twr(36000)
			twr_vac = this_stage.get_twr()
			dv_asl = this_stage.get_dv(LP_alt)
			dv_15km = this_stage.get_dv(15000)
			dv_36km = this_stage.get_dv(36000)
			dv_vac = this_stage.get_dv()
			b_time_str = min_sec(round(this_stage.get_burn_time()*10)/10)

			let stage_column_box = main_box.add_vertical_panel(10.0, Align.Stretch)
			
			let stage_nbr_label = display_info(stage_column_box, format("{0:N0}", stage_number))
			stage_nbr_label.font_size = text_font_size
			let act_eng_label = display_info(stage_column_box, format("{0:N0}", stage_act_eng))
			act_eng_label.font_size = text_font_size
			let twr_asl_label = display_info(stage_column_box, format("{0:N2}", twr_asl))
			twr_asl_label.font_size = text_font_size
			let dv_asl_label = display_info(stage_column_box, format("{0:N1}", dv_asl))
			dv_asl_label.font_size = text_font_size
			let twr_15km_label = display_info(stage_column_box, format("{0:N2}", twr_15km))
			twr_15km_label.font_size = text_font_size
			let dv_15km_label = display_info(stage_column_box, format("{0:N1}", dv_15km))
			dv_15km_label.font_size = text_font_size
			let twr_36km_label = display_info(stage_column_box, format("{0:N2}", twr_36km))
			twr_36km_label.font_size = text_font_size
			let dv_36km_label = display_info(stage_column_box, format("{0:N1}", dv_36km))
			dv_36km_label.font_size = text_font_size
			let twr_vac_label = display_info(stage_column_box, format("{0:N2}", twr_vac))
			twr_vac_label.font_size = text_font_size
			let dv_vac_label = display_info(stage_column_box, format("{0:N1}", dv_vac))
			dv_vac_label.font_size = text_font_size
			let b_time_label = display_info(stage_column_box, b_time_str)
			b_time_label.font_size = text_font_size
		}

		const total_dv_asl = total_delta_v(assembly, LP_alt)
		const total_dv_15km = total_delta_v(assembly, 15000)
		const total_dv_36km = total_delta_v(assembly, 36000)
		const total_dv_vac = total_delta_v(assembly)

		const total_time_str = min_sec(round(total_burn_time(assembly)*10)/10)

		const total_column_box = main_box.add_vertical_panel(10.0, Align.Stretch)
		const total_label = display_info(total_column_box, "Total")
		total_label.font_size = text_font_size
		const empty_act_eng_label = display_info(total_column_box, "--")
		empty_act_eng_label.font_size = text_font_size
		const empty_twr__asl_label = display_info(total_column_box, "--")
		empty_twr__asl_label.font_size = text_font_size
		const total_dv_asl_label = display_info(total_column_box, format("{0:N1}", total_dv_asl))
		total_dv_asl_label.font_size = text_font_size
		const empty_twr_15km_label = display_info(total_column_box, "--")
		empty_twr_15km_label.font_size = text_font_size
		const total_dv_15km_label = display_info(total_column_box, format("{0:N1}", total_dv_15km))
		total_dv_15km_label.font_size = text_font_size
		const empty_twr_36km_label = display_info(total_column_box, "--")
		empty_twr_36km_label.font_size = text_font_size
		const total_dv_36km_label = display_info(total_column_box, format("{0:N1}", total_dv_36km))
		total_dv_36km_label.font_size = text_font_size
		const empty_twr_vac_label = display_info(total_column_box, "--")
		empty_twr_vac_label.font_size = text_font_size
		const total_dv_vac_label = display_info(total_column_box, format("{0:N1}", total_dv_vac))
		total_dv_vac_label.font_size = text_font_size
		const total_b_time_label = display_info(total_column_box, total_time_str)
		total_b_time_label.font_size = text_font_size
	}
	else {
		CONSOLE.print_line(">>> no assembly")
	}
	main_box
}



//____________________________________________________
// OTHER FUNCTIONS
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾


sync fn display_info (box: Container, lab: string) -> ksp::ui::Label = {
	box.add_label(lab, Align.Stretch)
}


sync fn total_delta_v (assembly: ObjectAssembly, alt: float = Kerbin.atmosphere_depth + 20000) -> float = {
	let total_dv = 0.0
	for (stg in assembly.delta_v.stages.filter(fn(s) -> s.active_engines.length > 0)) {
		const this_stage = Stage_Info_VAB(stg)
		total_dv += this_stage.get_dv(alt)
	}
	total_dv
}

sync fn total_burn_time (assembly: ObjectAssembly, alt: float = Kerbin.atmosphere_depth + 20000) -> float = {
	let total_time = 0.0
	for (stg in assembly.delta_v.stages.filter(fn(s) -> s.active_engines.length > 0)) {
		const this_stage = Stage_Info_VAB(stg)
		total_time += this_stage.get_burn_time(alt)
	}
	total_time
}

sync fn min_sec (time: float) -> string = {
	let min = floor(time / 60)
	let sec = time - min * 60
	let sec_str = sec.to_fixed(1)
	if (sec < 10) {sec_str = "0" + sec.to_fixed(1)}
	return min.to_string() + "m" + sec_str + "s"
}