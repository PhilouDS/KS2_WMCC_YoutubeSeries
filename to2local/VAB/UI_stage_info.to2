//____________________________________________________
// CORE LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { log, floor, round } from core::math
use { format } from core::str

//____________________________________________________
// KSP LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { CONSOLE } from ksp::console
use { CONSOLE_WINDOW, screen_size, open_window, Align } from ksp::ui
use { sleep, yield, wait_until } from ksp::game
use { active_object_assembly_builder } from ksp::oab
use { DeltaVSituation } from ksp::vessel
use { vec2 } from ksp::math

//____________________________________________________
// PERSONAL LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

//____________________________________________________
// MAIN FUNCTION
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

pub fn main_editor() -> Result<Unit, string> = {

	CONSOLE.clear()

	const myScreen = screen_size()
  const window_width = 150
  const window_height = 250
	const text_font_size = 15.0
  const stage_window = open_window("<b>STAGE INFO</b>",
    0.65*myScreen.x,
    0.4*myScreen.y,
    window_width,
    window_height)

	const click_button: Cell<bool> = Cell(false)

	const button_box = stage_window.add_horizontal(10.0, Align.Center)
	const refresh_button = button_box.add_button("Refresh", Align.Center)
	
	const main_box: Cell<ksp::ui::Container> = Cell(create_info_box(stage_window, text_font_size))

	while (!stage_window.is_closed) {
		refresh_button.on_click(fn() -> {
			click_button.value = true
			main_box.value.remove()
		})
		if (click_button.value) {
			main_box.value = create_info_box(stage_window, text_font_size)
			click_button.value = false
		}
		yield()
	}
}

fn create_info_box (window: ksp::ui::Window, text_font_size: float) -> ksp::ui::Container = {
	const builder = active_object_assembly_builder().value
	const craft = builder.main_assembly.value

	let stage_number = 0
	let stage_act_eng = 0
	let twr_vac = 0.0
	let twr_asl = 0.0
	let dv_vac = 0.0
	let dv_asl = 0.0
	let b_time_str = "0"

	const main_box = window.add_horizontal(10.0, Align.Stretch)
	const first_column_box = main_box.add_vertical(10.0, Align.Stretch)
	const nbr_title = first_column_box.add_label("# Stage", Align.End)
	nbr_title.font_size = text_font_size
	const act_eng_title = first_column_box.add_label("# Active Engines", Align.End)
	act_eng_title.font_size = text_font_size
	const twr_asl_title = first_column_box.add_label("ASL TWR", Align.End)
	twr_asl_title.font_size = text_font_size
	const dv_asl_title = first_column_box.add_label("ASL Δv", Align.End)
	dv_asl_title.font_size = text_font_size
	const twr_vac_title = first_column_box.add_label("Vac TWR", Align.End)
	twr_vac_title.font_size = text_font_size
	const dv_vac_title = first_column_box.add_label("Vac Δv", Align.End)
	dv_vac_title.font_size = text_font_size
	const burn_time_title = first_column_box.add_label("Burn time", Align.End)
	burn_time_title.font_size = text_font_size
	
	for (stg in craft.delta_v.stages.filter(fn(s) -> s.active_engines.length > 0)) {
		stage_number = craft.delta_v.stages.length - stg.stage
		stage_act_eng = stg.active_engines.length
		twr_vac = TWR_stage(stg)
		twr_asl = TWR_stage(stg, DeltaVSituation.SeaLevel)
		dv_vac = dv_stg(stg)
		dv_asl = dv_stg(stg, DeltaVSituation.SeaLevel)
		b_time_str = min_sec(round(burn_time_stg(stg)*10)/10)

		let stage_column_box = main_box.add_vertical_panel(10.0, Align.Stretch)
		
		let stage_nbr_label = display_info(stage_column_box, format("{0:N0}", stage_number))
		stage_nbr_label.font_size = text_font_size
		let act_eng_label = display_info(stage_column_box, format("{0:N0}", stage_act_eng))
		act_eng_label.font_size = text_font_size
		let twr_asl_label = display_info(stage_column_box, format("{0:N2}", twr_asl))
		twr_asl_label.font_size = text_font_size
		let dv_asl_label = display_info(stage_column_box, format("{0:N1}", dv_asl))
		dv_asl_label.font_size = text_font_size
		let twr_vac_label = display_info(stage_column_box, format("{0:N2}", twr_vac))
		twr_vac_label.font_size = text_font_size
		let dv_vac_label = display_info(stage_column_box, format("{0:N1}", dv_vac))
		dv_vac_label.font_size = text_font_size
		let b_time_label = display_info(stage_column_box, b_time_str)
		b_time_label.font_size = text_font_size
	}

	const total_dv_asl = total_delta_v(craft, DeltaVSituation.SeaLevel)
	const total_dv_vac = total_delta_v(craft)
	const total_time_str = min_sec(round(total_burn_time(craft)*10)/10)

	const total_column_box = main_box.add_vertical_panel(10.0, Align.Stretch)
	const total_label = display_info(total_column_box, "Total")
	total_label.font_size = text_font_size
	const empty_act_eng_label = display_info(total_column_box, "--")
	empty_act_eng_label.font_size = text_font_size
	const empty_twr__asl_label = display_info(total_column_box, "--")
	empty_twr__asl_label.font_size = text_font_size
	const total_dv_asl_label = display_info(total_column_box, format("{0:N1}", total_dv_asl))
	total_dv_asl_label.font_size = text_font_size
	const empty_twr_vac_label = display_info(total_column_box, "--")
	empty_twr_vac_label.font_size = text_font_size
	const total_dv_vac_label = display_info(total_column_box, format("{0:N1}", total_dv_vac))
	total_dv_vac_label.font_size = text_font_size
	const total_b_time_label = display_info(total_column_box, total_time_str)
	total_b_time_label.font_size = text_font_size

	return main_box
}



//____________________________________________________
// OTHER FUNCTIONS
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾


sync fn display_info (box: ksp::ui::Container, lab: string) -> ksp::ui::Label = {
	box.add_label(lab, Align.Stretch)
}

sync fn list_of_engines (assembly: ksp::oab::ObjectAssembly) -> ksp::oab::ObjectAssemblyPart[] = {
	let list_eng: ksp::oab::ObjectAssemblyPart[] = []
	for(part in assembly.parts) {
		if (part.part_name.contains("engine")) {
			list_eng += part
		}
	}
	return list_eng
}

sync fn list_of_liquid_tanks (assembly: ksp::oab::ObjectAssembly) -> ksp::oab::ObjectAssemblyPart[] = {
	let list_tk: ksp::oab::ObjectAssemblyPart[] = []
	for(part in assembly.parts) {
		if (part.part_name.contains("tank")) {
			list_tk += part
		}
	}
	return list_tk
}

sync fn number_of_engines (assembly: ksp::oab::ObjectAssembly) -> int = {
	return list_of_engines(assembly).length
}

sync fn init_mass_stg (stg: ksp::oab::ObjectAssemblyStageDeltaV) -> float = {
	return stg.start_mass
}

sync fn final_mass_stg (stg: ksp::oab::ObjectAssemblyStageDeltaV) -> float = {
	return (stg.end_mass)
}

sync fn thrust_stg (stg: ksp::oab::ObjectAssemblyStageDeltaV, sit: ksp::vessel::DeltaVSituation = DeltaVSituation.Vaccum) -> float = {
	let stgThrust = 0.0
	const eng = stg.active_engines
	for (e in eng) {
		stgThrust += e.get_thrust(sit)
	}
	stgThrust
}

sync fn isp_stg (stg: ksp::oab::ObjectAssemblyStageDeltaV, sit: ksp::vessel::DeltaVSituation = DeltaVSituation.Vaccum) -> float = {
  let stgThrust = 0.0
  let sumFuelCons = 0.0
  const eng = stg.active_engines
	for (e in eng) {
    stgThrust += e.get_thrust(sit)
    sumFuelCons += e.get_thrust(sit) / e.get_ISP(sit)
  }
	if (sumFuelCons == 0.0) {
		return 0.0
	}
	else {
		return (stgThrust / sumFuelCons)
	}
}

sync fn effective_velocity_stg (stg: ksp::oab::ObjectAssemblyStageDeltaV, sit: ksp::vessel::DeltaVSituation = DeltaVSituation.Vaccum) -> float = {
  return isp_stg(stg, sit) * 9.80665
}

sync fn fuel_flow_stg (stg: ksp::oab::ObjectAssemblyStageDeltaV, sit: ksp::vessel::DeltaVSituation = DeltaVSituation.Vaccum) -> float = {
  let fuelFlow = 0.0
	if (effective_velocity_stg(stg, sit) != 0.0) {
  	fuelFlow = (thrust_stg(stg, sit) / effective_velocity_stg(stg, sit))
	}
  return fuelFlow
}

sync fn dv_stg (stg: ksp::oab::ObjectAssemblyStageDeltaV, sit: ksp::vessel::DeltaVSituation = DeltaVSituation.Vaccum) -> float = {
  let LN = log(init_mass_stg(stg) / final_mass_stg(stg))
	return effective_velocity_stg(stg, sit) * LN
}

sync fn total_delta_v (assembly: ksp::oab::ObjectAssembly, sit: ksp::vessel::DeltaVSituation = DeltaVSituation.Vaccum) -> float = {
	let total_dv = 0.0
	for (stg in assembly.delta_v.stages.filter(fn(s) -> s.active_engines.length > 0)) {
		total_dv += dv_stg(stg, sit)
	}
	total_dv
}

sync fn burn_time_stg (stg: ksp::oab::ObjectAssemblyStageDeltaV, sit: ksp::vessel::DeltaVSituation = DeltaVSituation.Vaccum) -> float = {
  let burnTime = 0.0
	if (fuel_flow_stg(stg, sit) != 0) {
		burnTime = (init_mass_stg(stg) - final_mass_stg(stg)) / fuel_flow_stg(stg, sit)
	}
  return burnTime
}

sync fn total_burn_time (assembly: ksp::oab::ObjectAssembly, sit: ksp::vessel::DeltaVSituation = DeltaVSituation.Vaccum) -> float = {
	let total_time = 0.0
	for (stg in assembly.delta_v.stages.filter(fn(s) -> s.active_engines.length > 0)) {
		total_time += burn_time_stg(stg, sit)
	}
	total_time
}

sync fn TWR_stage (stg: ksp::oab::ObjectAssemblyStageDeltaV, sit: ksp::vessel::DeltaVSituation = DeltaVSituation.Vaccum) -> float = {
  return (thrust_stg(stg, sit) / (init_mass_stg(stg) * 9.80665))
}

sync fn min_sec (time: float) -> string = {
	let min = floor(time / 60)
	let sec = time - min * 60
	let sec_str = sec.to_fixed(1)
	if (sec < 10) {sec_str = "0" + sec.to_fixed(1)}
	return min.to_string() + "m" + sec_str + "s"
}