// KONTROL SYSTEM 2 - v0.5.5.5
//____________________________________________________
// CORE LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { sqrt, asin, floor, PI } from core::math
use { format } from core::str

//____________________________________________________
// KSP LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { CONSOLE, color, RgbaColor } from ksp::console
use { CONSOLE_WINDOW, screen_size, open_window, Align, Window, Container } from ksp::ui
use { yield, wait_until } from ksp::game
use { Vec2, vec2 } from ksp::math
use { find_body, Body } from ksp::orbit

//____________________________________________________
// GLOBAL CONSTANTS
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

const myScreen: Vec2 = screen_size()
const window_width: float = myScreen.x/4
const window_height: float = myScreen.y/3
const button_font_size: float = 20.0
const text_font_size: float = 15.0
const canva_font_size: float = 20.0
const text_color: RgbaColor = color(1, 1, 0.5) //color(1,0.498,0.208)

//____________________________________________________
// MAIN FUNCTION
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

pub fn main_editor () -> Result<Unit, string> = {
  CONSOLE.clear()

  const main_window = open_window("<b>GEOSTATIONARY ALTITUDE</b>",
    (myScreen.x-window_width)/2,
    myScreen.y - 20,
    window_width,
    window_height)

  const click_button: Cell<bool> = Cell(false)

	const main_box = main_window.add_vertical(10.0, Align.Stretch)

  const body_box = main_box.add_horizontal(10.0, Align.Stretch, 10.0)
  const body_label = body_box.add_label(" Body:", Align.Start)
  body_label.font_size = text_font_size
  const body_value = body_box.add_string_input(Align.Start, 10.0)
  body_value.value = "Kerbin"

  const phase_box = main_box.add_horizontal(10.0, Align.Stretch, 10.0)
  const phase_label = phase_box.add_label("Phase:", Align.Start)
  phase_label.font_size = text_font_size
  const phase_value = phase_box.add_float_input(Align.Start, 10.0)
  phase_value.value = 2.0/3.0
  
  const compute_button = main_box.add_button("Compute altitude", Align.Center)
  compute_button.font_size = button_font_size
	
	let maybe_box = create_box(main_window, find_body(body_value.value).value, phase_value.value)?
  const answer_box: Cell<Container> = Cell(maybe_box)

	while (!main_window.is_closed) {
		compute_button.on_click(fn() -> {
			click_button.value = true
			answer_box.value.remove()
		})
		if (click_button.value) {
			maybe_box = create_box(main_window, find_body(body_value.value).value, phase_value.value)?
			answer_box.value = maybe_box
			click_button.value = false
		}
		yield()
	}
}


fn create_box(window: Window, bod: Body, scale: float) -> Result<Container, string> = {
  const answer_box = window.add_vertical_panel(10.0, Align.Center)
  const (a, b, c, d, e, f, g) = compute_value(bod, scale)

  if (a > bod.SOI_radius) {
    answer_box.add_label("Geostationary orbit is impossible (out of SOI).", Align.Start)
  }
  else {
    const geo_alt_label = answer_box.add_label($"<b>Geostationary altitude above sea level:</b>", Align.Start)
      geo_alt_label.font_size = text_font_size
    const geo_alt_val = answer_box.add_label($"{b:N2} m", Align.Center)
    
    const geo_vel_label = answer_box.add_label($"Geostationary velocity:", Align.Start)
      geo_vel_label.font_size = text_font_size
    const geo_vel_val = answer_box.add_label($"{c:N2} m/s", Align.Center)

    answer_box.add_spacer(10.0)
    
    const geo_phase_label = answer_box.add_label($"<b>Geostationary phase orbit:</b>", Align.Start)
      geo_phase_label.font_size = text_font_size
    
    const geo_period_label = answer_box.add_label($"           Period: {d:N2} s", Align.Start)
      geo_period_label.font_size = text_font_size
    
    const geo_periapsis_label = answer_box.add_label($"        Periapsis: {e:N2} m", Align.Start)
      geo_periapsis_label.font_size = text_font_size
    
    const geo_phase_vel_label = answer_box.add_label($"         Velocity: {f:N2} m/s", Align.Start)
      geo_phase_vel_label.font_size = text_font_size
    
    const geo_deltav_label = answer_box.add_label($"Δv to circularize: {g:N2} m/s", Align.Start)
      geo_deltav_label.font_size = text_font_size
  }
  answer_box
}

sync fn compute_value (bod: Body, phase: float) -> (a: float, b: float, c: float, d: float, e: float, f: float, g: float) = {
  const mu = bod.grav_parameter
  const rot_period = bod.rotation_period
  const R = bod.radius

  // geostationary altitude from body's center of mass
  const geo = ((mu * rot_period**2) / (4 * PI**2))**(1.0/3)
  // geostationary altitude above sea level
  const geo_sealevel = geo - R

  // ship's velocity in a circular orbit at geostationary altitude
  const geo_velocity = (2 * PI * geo) / rot_period

  // phase orbit to create a comm network
  const geo_phase_period = phase * rot_period
  const SMA = mu**(1.0/3) * (geo_phase_period / (2 * PI))**(2.0/3) //-> Semi Major Axis
  const geo_phase_periapsis = 2 * SMA - geo

  const RV = R + geo_sealevel // ship's altitude from body's center of mass
  const RP = R + geo_phase_periapsis // ship's periapsis from body's center of mass
  const RA = R + geo_sealevel // ship's apoapsis from body's center of mass
  const phase_SMA = (RA + RP) / 2 // Semi-Major Axis

  const init_vel = sqrt(mu * (2/RV - 1/phase_SMA))
  const delta_v = geo_velocity - init_vel


  (a: geo, b: geo_sealevel, c: geo_velocity, d: geo_phase_period, e: geo_phase_periapsis, f: init_vel, g: delta_v)
}