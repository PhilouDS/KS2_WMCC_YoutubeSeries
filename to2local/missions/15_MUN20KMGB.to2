// KONTROL SYSTEM 2 - v0.5.8.2
//____________________________________________________
// CORE LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { sqrt, max, min, abs, round, clamp_degrees360, floor, log10 } from core::math
use { format } from core::str

//____________________________________________________
// KSP LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { sleep, wait_until, yield, current_time, wait_while } from ksp::game
use { warp_to, current_warp_rate, set_warp_index, cancel_warp } from ksp::game::warp
use { LogFile, MAIN_LOG, SAVE_LOAD_CONTROL } from ksp::debug
use { CONSOLE } from ksp::console
use { CONSOLE_WINDOW } from ksp::ui
use { vec2 } from ksp::math
use { Vessel, AutopilotMode, DeltaVSituation, VesselSituation, ManeuverNode, ParachuteDeployState } from ksp::vessel
use { Orbit, find_body, Body } from ksp::orbit

//____________________________________________________
// PERSONAL LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use * from lib::misc
use * from lib::mission_logs
use * from lib::prep_launch
use * from lib::show_info
use * from lib::science
use * from lib::system
use * from lib::in_flight
use * from lib::adjusted_mnv
use * from lib::transfer
use { reentry_and_landing } from lib::landing

//____________________________________________________
// GLOBAL CONSTANTS
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

use * from lib::my_constants


//____________________________________________________
// MAIN FUNCTION
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

pub fn main_flight (ship: Vessel, pitchAng: float = 80, pitchVel: float = 22, targetApo: float = 200000, az: float = 90) -> Unit = {
  
  const ship_target = start_with_target(ship, "TO THE MUN AND BACK", Mun, false)
  const has_fairing = check_fairing(ship)
  const has_clamps = check_clamps(ship)    
  sleep(0.25)

  let (final_data, final_sample) = (0.0, 0.0)
  let (data, sample) = (0.0, 0.0)

  ship.autopilot.lock_direction = ship.heading_direction(90, 90, az)
  log_general_info(ship, targetApo)

  ship.set_throttle(1)
  countdown(ship, has_clamps, 3)

  first_info([
    format("Target apoapsis: {0:N1} m", (targetApo)),
    "--",
    format("Initiate GT at {0:N1} m/s", (pitchVel)),
    format("... with a pitch of {0:N1}°", (pitchAng)),
    format("... and an azimuth of {0:N1}°.", (clamp_degrees360(az)))
  ])

  while (ship.vertical_surface_speed < pitchVel) {
    check_staging(ship)
  }

  gravity_turn(ship, targetApo, pitchAng, az, has_fairing)

  deploy_antenna(ship)
  yield()

  exe_mnv(ship, go_to_from(ship, 250000, "AP"), false)

  circ_at_AP(ship)
  sleep(0.1)
  log_orbit_info(ship.orbit)

  orientation(ship, ship.orbit.orbit_normal)
  CONSOLE.clear()

  do_warp(current_time() + (ship.orbit.period / 2))

  transfer_to_body(ship, ship_target, -2000, false, false)
  yield()

  while (ship.orbit.next_patch.value.periapsis > 0) {
    ship.set_throttle(0.01)
    ship.autopilot.target_orientation = ship.orbit.orbital_velocity(current_time())
    yield()
  }
  ship.set_throttle(0)
  yield()

  while (ship.orbit.next_patch.value.periapsis < 15_000) {
    ship.set_throttle(0.01)
    ship.autopilot.target_orientation = ship.orbit.orbital_velocity(current_time())
    yield()
  }
  ship.set_throttle(0)
  yield()

  warp_SOI(ship, ship_target)
  yield()
  orientation(ship, ship.orbit.orbit_normal)
  yield()

  save_now(ship)
  yield()

  (data, sample) = run_science(ship, true, false)      
  yield()
  final_data += data
  final_sample += sample
  yield()

  let kerbin_per_node = ship.maneuver.add(ship.orbit.next_periapsis_time(current_time()), 0, 0, 0).value

  kerbin_per_node = set_periapsis_next_patch(ship, 500_000, kerbin_per_node, 70000, 10)
  kerbin_per_node = set_periapsis_next_patch(ship, 150_000, kerbin_per_node, 20000, 5)
  kerbin_per_node = set_periapsis_next_patch(ship, 50_000, kerbin_per_node, 10000)
  
  do_warp(ship.orbit.next_periapsis_time(current_time()) - 60)

  wait_until(fn() -> ship.altitude_sealevel < 70_000)
  sleep(0.25)

  (data, sample) = run_science(ship, true, false)      
  yield()
  final_data += data
  final_sample += sample
  sleep(1)

  exe_mnv(ship, kerbin_per_node.burn_vector.magnitude, false)
  yield()

  warp_SOI(ship, Kerbin)
  yield()

  while (ship.altitude_sealevel > 500_000) {
    set_warp_index(floor(log10(ship.altitude_sealevel)).to_int)
    yield()
  }
  cancel_warp()
  wait_until(fn() -> current_warp_rate() < 1.1)
  yield()
  CONSOLE.clear()

  reentry_and_landing(ship)
  yield()

  (data, sample) = run_science(ship, true, false)      
  yield()
  final_data += data
  final_sample += sample
  yield()

  log_end_mission(ship, final_data, final_sample)
  yield()

  end_of_mission(ship, true)  
}
