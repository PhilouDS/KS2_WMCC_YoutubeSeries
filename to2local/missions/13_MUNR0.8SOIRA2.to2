// KONTROL SYSTEM 2 - v0.5.7.9
//____________________________________________________
// CORE LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { sqrt, max, min, abs, round, clamp_degrees360 } from core::math
use { format } from core::str

//____________________________________________________
// KSP LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { sleep, wait_until, yield, current_time } from ksp::game
use { warp_to, current_warp_rate, set_warp_index, cancel_warp } from ksp::game::warp
use { LogFile, MAIN_LOG } from ksp::debug
use { CONSOLE } from ksp::console
use { CONSOLE_WINDOW } from ksp::ui
use { vec2 } from ksp::math
use { Vessel, AutopilotMode, DeltaVSituation, VesselSituation, ManeuverNode } from ksp::vessel
use { Orbit, find_body, Body } from ksp::orbit

//____________________________________________________
// PERSONAL LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use * from lib::misc
use * from lib::mission_logs
use * from lib::prep_launch
use * from lib::show_info
use * from lib::science
use * from lib::in_flight
use * from lib::adjusted_mnv
use * from lib::transfer

//____________________________________________________
// GLOBAL CONSTANTS
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

use * from lib::my_constants


//____________________________________________________
// MAIN FUNCTION
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

pub fn main_flight (ship: Vessel, pitchAng: float = 83, pitchVel: float = 40, targetApo: float = 150000, az: float = 90) -> Unit = {
  CONSOLE.clear()
  CONSOLE_WINDOW.open()
  console_size(500,600)
  ship.target = Mun
  CONSOLE.print_line($"Target: {ship.target.value.name}")

  let final_data = 0.0
  let final_sample = 0.0
  let (data, sample) = (0.0, 0.0)

  MAIN_LOG.truncate()

  log_mission("RELAY SAT OF THE MUN") 
    
  sleep(0.5)

  CONSOLE.clear()

  ship.autopilot.enabled = false // SAS
  ship.autopilot.mode = AutopilotMode.Autopilot
  ship.autopilot.lock_direction = ship.heading_direction(90, 90, az)

  log_general_info(ship, targetApo)

  const main_fairing = ship.parts.filter_map(fn(p) -> p.fairing)[0]
  ship.set_throttle(1)
  countdown(ship, true, 3)

  first_info([
    format("Target apoapsis: {0:N1} m", (targetApo)),
    "--",
    format("Initiate GT at {0:N1} m/s", (pitchVel)),
    format("... with a pitch of {0:N1}°", (pitchAng)),
    format("... and an azimuth of {0:N1}°.", (clamp_degrees360(az)))
  ])

  while (ship.vertical_surface_speed < pitchVel) {
    check_staging(ship)
  }

  gravity_turn(ship, targetApo, pitchAng, az, true)

  sleep(1)

  exe_mnv(ship, go_to_from(ship, 250000, "AP"), false)

  circ_at_AP(ship)
  sleep(0.1)
  log_orbit_info(ship.orbit)

  ship.autopilot.target_orientation = ship.orbit.orbit_normal
  wait_until(fn() -> ship.facing.vector.angle_to(ship.orbit.orbit_normal) < 1)

  CONSOLE.clear()
  warp_to(current_time() + (ship.orbit.period / 2))
  yield()
  wait_until(fn() -> current_warp_rate() < 1.1)
  yield()
  sleep(1)

  CONSOLE.print_line($"Target: {ship.target.value.name}")
  sleep(1)

  transfer_to_body(ship, ship.target.value.body.value, 500_000, false, true)
  

  wait_until(fn() -> ship.main_body.name == ship.target.value.body.value.name)

  sleep(1)
  CONSOLE.clear()

  warp_to(ship.orbit.next_periapsis_time(current_time()) - 30)
  wait_until(fn() -> current_warp_rate() < 1.1)
  sleep(1)
  
  
  while(ship.facing.vector.angle_to(-1 * ship.orbital_velocity) > 1) {
    ship.autopilot.target_orientation = -1 * ship.orbital_velocity
    yield()
  }

  sleep(1)

  const now = ship.orbit.next_periapsis_time(current_time())
  wait_until(fn() ->  now - current_time() < 15)

  while (!ship.orbit.apoapsis.defined || ship.orbit.apoapsis.value > 0.8 * ship.main_body.SOI_radius) {
    ship.autopilot.target_orientation = -1 * ship.orbit.orbital_velocity(current_time())
    wait_until(fn() -> ship.facing.vector.angle_to(-1 * ship.orbit.orbital_velocity(current_time())) < 1.5)
    sleep(0.5)
    ship.set_throttle(1)
    sleep(0.1)
  }
  ship.set_throttle(0)
  sleep(1)

  circ_at_AP(ship)
  sleep(0.1)
  log_orbit_info(ship.orbit)

  
  while (ship.facing.vector.angle_to(ship.orbit.orbit_normal) > 1) {
    ship.autopilot.target_orientation = ship.orbit.orbit_normal
    yield()
  }
  sleep(0.5)
  
  log_end_mission(ship, final_data, final_sample)
  yield()
  close_log()
  yield()
  end_of_mission(ship)
}
