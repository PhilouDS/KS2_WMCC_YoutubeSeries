// Last modification - KONTROL SYSTEM 2 - v0.5.8.5
//____________________________________________________
// CORE LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { sqrt, max, min, abs, round, clamp_degrees360, floor, log10, acos_deg } from core::math
use { format } from core::str

//____________________________________________________
// KSP LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { MAINFRAME, Process, sleep, wait_until, yield, current_time, wait_while } from ksp::game
use { warp_to, current_warp_rate, set_warp_index, cancel_warp } from ksp::game::warp
use { open_log_file, LogFile, MAIN_LOG, SAVE_LOAD_CONTROL } from ksp::debug
use { CONSOLE } from ksp::console
use { CONSOLE_WINDOW } from ksp::ui
use { vec2 } from ksp::math
use { Vessel, AutopilotMode, DeltaVSituation, VesselSituation, ManeuverNode, ParachuteDeployState } from ksp::vessel
use { Orbit, find_body, Body } from ksp::orbit
use { pid_loop, PIDLoop } from ksp::control

//____________________________________________________
// PERSONAL LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use * from lib::misc
use * from lib::mission_logs
use * from lib::prep_launch
use * from lib::show_info
use * from lib::science
use * from lib::system
use * from lib::in_flight
use * from lib::adjusted_mnv
use * from lib::transfer
use * from lib::landing
use * from lib::precise_landing
use { Spot } from lib::my_structures

//____________________________________________________
// GLOBAL CONSTANTS
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

use * from lib::my_constants


//____________________________________________________
// MAIN FUNCTION
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

pub fn main_flight (ship: Vessel, targetApo: float = 130000) -> Unit = {
  CONSOLE.clear()
  CONSOLE_WINDOW.open()
  console_size(400,500)
  sleep(0.5)

  const launcher = "LV2.0T"

  const preLaunch = ship.situation == VesselSituation.PreLaunch

  const ship_target = start_with_target(ship, "ORBITAL SURVEY OF MINMUS", Minmus, preLaunch)

  if (preLaunch) {go_to_orbit(ship, targetApo, launcher)}

  let (final_data, final_sample) = (0.0, 0.0)
  let (data, sample) = (0.0, 0.0)

  gears_on_off(ship)
  sleep(1)
  deploy_panels(ship)
  sleep(1)
  deploy_antenna(ship)
  sleep(1)
  lights_on_off(ship)

  do_warp(current_time() + (ship.orbit.period / 2))

  transfer_to_body(ship, ship_target, 450000, true, false)
  yield()

  sleep(1)

  let t0 = current_time()
  const inc_node = set_inc_next_patch(ship, 90, ship.maneuver.add(t0 + 3600, 0, 0, 0).value, 0.05, 0.05)
  sleep(1)
  CONSOLE.clear()
  exe_mnv(ship, inc_node.burn_vector.magnitude, false)
  sleep(0.2)
  
  orientation(ship, ship.orbit.orbit_normal)
  sleep(0.2)

  t0 = current_time()
  const per_node = set_periapsis_simple(ship, 15_000, t0 + 3600, 5000, 0.05)
  sleep(1)
  CONSOLE.clear()
  exe_mnv(ship, per_node.burn_vector.magnitude, false)
  sleep(0.2)
  
  orientation(ship, ship.orbit.orbit_normal)
  sleep(0.2)

  warp_SOI(ship, ship_target, 7)
  sleep(5)
  orientation(ship, ship.orbit.orbit_normal)
  yield()

  save_now(ship)
  yield()

  (data, sample) = run_science(ship, true, true)      
  yield()
  final_data += data
  final_sample += sample
  yield()

  do_warp(ship.orbit.next_periapsis_time(current_time()) - 60)
  
  (data, sample) = run_science(ship, true, true)      
  yield()
  final_data += data
  final_sample += sample
  yield()
  
  capture_SOI(ship, 0.5)
  sleep(1)
  CONSOLE.clear()
  
  exe_mnv(ship, go_to_from(ship, 300000, "PE"), false)
  sleep(0.1)
  
  circ_at_AP(ship)
  
  ship.autopilot.enabled = true // SAS
  ship.autopilot.mode = AutopilotMode.RadialIn
  sleep(5)
  
  log_end_mission(ship, final_data, final_sample)
  yield()
  close_log()
  yield()
  end_of_mission(ship, false)

}
