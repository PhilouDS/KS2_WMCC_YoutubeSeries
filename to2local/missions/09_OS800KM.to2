// KONTROL SYSTEM 2 - v0.5.7.3
//____________________________________________________
// CORE LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { sqrt, max, min, abs, round, floor, clamp_degrees360 } from core::math
use { format } from core::str

//____________________________________________________
// KSP LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { sleep, wait_until, yield, current_time } from ksp::game
use { MAIN_LOG } from ksp::debug
use { CONSOLE } from ksp::console
use { CONSOLE_WINDOW } from ksp::ui
use { vec2 } from ksp::math
use { Vessel, AutopilotMode, DeltaVSituation } from ksp::vessel
use { Orbit, find_body } from ksp::orbit

//____________________________________________________
// PERSONAL LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { print_title, end_of_mission, wait_alt } from lib::misc
use { print_science, run_science, transmit_data, check_science } from lib::science
use { info_gt, info_orbit, first_info } from lib::show_info
use { countdown, launch_from_north } from lib::prep_launch
use { check_staging, trigger_staging, gravity_turn } from lib::in_flight
use { exe_mnv, go_to_from, circ_at_AP } from lib::adjusted_mnv

//____________________________________________________
// MAIN FUNCTION
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

pub fn main_flight (ship: Vessel,
                    pitchAng: float = 85,
                    pitchVel: float = 80,
                    targetApo: float = 150000,
                    az: float = -6.9) -> Unit = {

  CONSOLE.clear()
  
  CONSOLE_WINDOW.open()
  CONSOLE_WINDOW.size = vec2(500,600)
    
  sleep(0.5)

  ship.autopilot.enabled = false // SAS
  ship.autopilot.mode = AutopilotMode.Autopilot
  ship.autopilot.lock_direction = ship.heading_direction(90, 90, az)

  const main_fairing = ship.parts.filter_map(fn(p) -> p.fairing)[0]
  ship.set_throttle(1)
  countdown(ship, true, 3)

  first_info([
    format("Target apoapsis: {0:N1} m", (targetApo)),
    "--",
    format("Initiate GT at {0:N1} m/s", (pitchVel)),
    format("... with a pitch of {0:N1}°", (pitchAng)),
    format("... and an azimuth of {0:N1}°.", (clamp_degrees360(az)))
  ])

  while (ship.vertical_surface_speed < pitchVel) {
    check_staging(ship)
  }

  gravity_turn(ship, targetApo, pitchAng, az, true)
  
  sleep(1)
 
  circ_at_AP(ship)

  exe_mnv(ship, go_to_from(ship, 800_000, "PE"), false)

  sleep(1)

  circ_at_AP(ship)

  end_of_mission(ship)

}
