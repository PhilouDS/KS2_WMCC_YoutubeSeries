// Last modification - KONTROL SYSTEM 2 - v0.5.8.5
//____________________________________________________
// CORE LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { sqrt, max, min, abs, round, clamp_degrees360, floor, log10, acos_deg } from core::math
use { format } from core::str

//____________________________________________________
// KSP LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use { MAINFRAME, Process, sleep, wait_until, yield, current_time, wait_while } from ksp::game
use { warp_to, current_warp_rate, set_warp_index, cancel_warp } from ksp::game::warp
use { open_log_file, LogFile, MAIN_LOG, SAVE_LOAD_CONTROL } from ksp::debug
use { CONSOLE } from ksp::console
use { CONSOLE_WINDOW } from ksp::ui
use { vec2 } from ksp::math
use { Vessel, AutopilotMode, DeltaVSituation, VesselSituation, ManeuverNode, ParachuteDeployState } from ksp::vessel
use { Orbit, find_body, Body } from ksp::orbit
use { pid_loop, PIDLoop } from ksp::control

//____________________________________________________
// PERSONAL LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
use * from lib::misc
use * from lib::mission_logs
use * from lib::prep_launch
use * from lib::show_info
use * from lib::science
use * from lib::system
use * from lib::in_flight
use * from lib::adjusted_mnv
use * from lib::transfer
use * from lib::landing
use * from lib::precise_landing
use { Spot } from lib::my_structures

//____________________________________________________
// GLOBAL CONSTANTS
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

use * from lib::my_constants


//____________________________________________________
// MAIN FUNCTION
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

pub fn main_flight (ship: Vessel, targetApo: float = 130000) -> Unit = {
  CONSOLE.clear()
  CONSOLE_WINDOW.open()
  console_size(400,500)
  sleep(0.5)

  const launcher = "LV2.2T"

  const preLaunch = ship.situation == VesselSituation.PreLaunch

  const ship_target = start_with_target(ship, "MINMUS MONUMENT", Minmus, preLaunch)

  // LANDING POINT
  const minmus_monument = Minmus.waypoints[0]
  const mm = minmus_monument.geo_coordinates
  const MM = Spot(minmus_monument.name, mm.latitude, mm.longitude, mm.body.name)

  if (preLaunch) {go_to_orbit(ship, targetApo, launcher)}

  let (final_data, final_sample) = (0.0, 0.0)
  let (data, sample) = (0.0, 0.0)

  gears_on_off(ship)
  sleep(1)
  deploy_panels(ship)
  sleep(1)
  deploy_antenna(ship)
  sleep(1)
  lights_on_off(ship)
  sleep(1)

  do_warp(current_time() + (ship.orbit.period / 2))

  transfer_to_body(ship, ship_target, 10000, false, false)
  yield()

  sleep(1)

  let t0 = current_time()
  const inc_node = set_inc_next_patch(ship, MM.lat, ship.maneuver.add(t0 + 3600, 0, 0, 0).value, 0.5, 0.05)
  sleep(1)
  CONSOLE.clear()
  exe_mnv(ship, inc_node.burn_vector.magnitude, false)
  sleep(0.2)

  warp_SOI(ship, ship_target, 6)
  sleep(3)
  orientation(ship, ship.orbit.orbit_normal)
  yield()

  save_now(ship)
  yield()

  (data, sample) = run_science(ship, true, true)      
  yield()
  final_data += data
  final_sample += sample
  sleep(2)

  const precise_periapsis = adjust_periapsis(ship, 15000, 1500, 0.01)
  yield()
  CONSOLE.clear()
  exe_mnv(ship, precise_periapsis.burn_vector.magnitude, false)
  yield()
  CONSOLE.clear()

  let time_to_pe = ship.orbit.next_periapsis_time(current_time())

  do_warp(time_to_pe - 10)
  sleep(0.2)
  orientation(ship, -1 * ship.orbit.orbital_velocity(current_time()))
  set_warp_index(2)
  while (current_time() < time_to_pe - 10) {
    CONSOLE.print_at(0,0, $"Capture maneuver in: {ship.orbit.next_periapsis_time(current_time()) - current_time():N1} s   ")
    yield()
  }

  cancel_warp()
  sleep(0.2)

  (data, sample) = run_science(ship, true, true)      
  yield()
  final_data += data
  final_sample += sample
  yield()

  capture_SOI(ship, 0.95)

  yield()

  const suicid_burn_pid = pid_loop(5.4, 23.478261, 0.310500, 0.01, 1)
  yield()

  precise_landing(ship, MM, suicid_burn_pid, 6_000, 10_000)

  (data, sample) = run_science(ship, true, true)      
  yield()
  final_data += data
  final_sample += sample
  yield()

  log_end_mission(ship, final_data, final_sample)
  yield()

  end_of_mission(ship)
}
