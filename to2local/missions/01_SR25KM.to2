//____________________________________________________
// LIBRARIES
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

use { Vessel, AutopilotMode, DeltaVSituation } from ksp::vessel
use { CONSOLE } from ksp::console
use { CONSOLE_WINDOW } from ksp::ui
use { sqrt, max, min, abs, round } from core::math
use { vec2 } from ksp::math
use { format } from core::str
use { sleep, wait_until, yield, current_time } from ksp::game
use { Orbit } from ksp::orbit
use { print_title, end_of_mission, wait_alt } from lib::misc
use { print_science, run_science, transmit_data, check_science } from lib::science

//____________________________________________________
// FUNCTIONS
//‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

pub fn main_flight (ship: Vessel) -> Unit = {
  CONSOLE.clear()
  
  CONSOLE_WINDOW.open()
  CONSOLE_WINDOW.size = vec2(500,600) 
  
  sleep(0.5)

  ship.autopilot.enabled = false // SAS
  ship.autopilot.mode = AutopilotMode.Autopilot
  ship.autopilot.target_orientation = ship.heading_direction(90, 90, 0).vector

  let check_done = false

  print_science(ship)
  sleep(5)
  run_science(ship, true, true)
  sleep(1)

  ship.set_throttle(1)
  wait_until(fn() -> ship.staging.ready)
  ship.staging.next()

  sleep(1)

  while (ship.altitude_sealevel <= 25000) {
    CONSOLE.print_at(2,0, format("Altitude above sea: {0:N1} m", ship.altitude_sealevel))
    if (ship.altitude_sealevel > 5000 && !check_done) {
      if (check_science(ship)) {
        run_science(ship, false)
        check_done = true
      }
    }
    yield()
  }

  sleep(1)

  transmit_data(ship)

  sleep(1)

  end_of_mission(ship)


}
